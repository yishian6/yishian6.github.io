{
    "version": "https://jsonfeed.org/version/1",
    "title": "CodingJourney",
    "subtitle": "zblog",
    "icon": "http://yishan.blog/images/favicon.ico",
    "description": "技术不可停滞不前，学习方能使我们进步",
    "home_page_url": "http://yishan.blog",
    "items": [
        {
            "id": "http://yishan.blog/2023/07/26/basicConfig/%E4%BD%BF%E7%94%A8hexo+github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/",
            "url": "http://yishan.blog/2023/07/26/basicConfig/%E4%BD%BF%E7%94%A8hexo+github%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/",
            "title": "使用hexo+github搭建个人博客",
            "date_published": "2023-07-26T03:14:05.000Z",
            "content_html": "<p>摘要：<br />\n本文讲述如何使用 hexo+github 搭建属于自己的个人博客，并且配置相应的主题使自己的博客更加美观</p>\n<h1 id=\"1-概念介绍\"><a class=\"anchor\" href=\"#1-概念介绍\">#</a> 1、概念介绍</h1>\n<p>博客这东西大家应该都不陌生，网上有很多各式各样的博客。很多人也萌生了搭建自己的博客的想法，但是奈何技术有限，前后端技术，服务器部署，域名解析等等，要掌握一大推技术才能搭建个人博客。这无疑劝退了一大波人。<br />\n但是现在就有一个便捷的技术摆在眼前，不需要太复杂的操作，不要服务器，不要域名，这就是 Hexo 技术，使用它再搭配 github 或者 gitee，coding 就可以轻松搭建属于自己的个人博客。</p>\n<h3 id=\"11-什么是-hexo\"><a class=\"anchor\" href=\"#11-什么是-hexo\">#</a> 1.1、什么是 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL3poLWNuL2RvY3Mv\">Hexo</span>？</h3>\n<p>Hexo 是一个快速、简洁且高效的博客框架。Hexo 使用 <span class=\"exturl\" data-url=\"aHR0cDovL2RhcmluZ2ZpcmViYWxsLm5ldC9wcm9qZWN0cy9tYXJrZG93bi8=\">Markdown</span>（或其他标记语言）解析文章，在几秒内，即可利用靓丽的主题生成静态网页。通过使用 Hexo 我们可以迅速的搭建属于自己的个人博客，并且可以选择主题来定制个人的喜好。<br />\n<img data-src=\"https://img-blog.csdnimg.cn/img_convert/daf2bfc19524eeb09d0a9353a96ab330.png\" alt=\"image.png\" /><br />\n 上面的图片所示就是官网的一些主题，有很多，你可以选择你喜欢的，我选择的是这款<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cua2FpdGFrdS54eXov\"> https://www.kaitaku.xyz/</span><br />\n 这是它的 github 地址<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3RoZW1lLXNob2thLXgvaGV4by10aGVtZS1zaG9rYVg=\"> https://github.com/theme-shoka-x/hexo-theme-shokaX</span>，大家可以根据爱好选择。<br />\n可以先看一下我基于上面的主题做的自己的博客<span class=\"exturl\" data-url=\"aHR0cHM6Ly95aXNoaWFuNi5naXRodWIuaW8v\"> https://yishian6.github.io/</span><br />\n 确实也是费了半天功夫才搭建好，所以才有感而发写一篇文章来记录一下。<br />\n使用 hexo 搭建博客的优点</p>\n<ul>\n<li>1、不需要服务器，github 免费提供的托管服务</li>\n<li>2、不需要域名，github 同样提供了一个.io 的域名</li>\n<li>3、不用自己写代码、hexo 提供了很多开源的博客模板功你选择。</li>\n<li>4、便于维护更新，换风格直接换模板就行。</li>\n</ul>\n<h1 id=\"2-环境安装\"><a class=\"anchor\" href=\"#2-环境安装\">#</a> 2、环境安装</h1>\n<h3 id=\"21-安装git\"><a class=\"anchor\" href=\"#21-安装git\">#</a> 2.1、安装 git</h3>\n<ul>\n<li>Windows：下载并安装 <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXQtc2NtLmNvbS9kb3dubG9hZC93aW4=\">git</span>。</li>\n<li>Mac：使用 <span class=\"exturl\" data-url=\"aHR0cDovL214Y2wuZ2l0aHViLmNvbS9ob21lYnJldy8=\">Homebrew</span>, <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5tYWNwb3J0cy5vcmcv\">MacPorts</span> 或者下载 <span class=\"exturl\" data-url=\"aHR0cDovL3NvdXJjZWZvcmdlLm5ldC9wcm9qZWN0cy9naXQtb3N4LWluc3RhbGxlci8=\">安装程序</span>。</li>\n<li>Linux (Ubuntu, Debian)：sudo apt-get install git-core</li>\n<li>Linux (Fedora, Red Hat, CentOS)：sudo yum install git-core</li>\n</ul>\n<p>点击上面的链接进入官网，选择 64 位程序进行安装<br />\n<img data-src=\"https://img-blog.csdnimg.cn/img_convert/2cc1f7ceb24b4a99c477d6d668c8d830.png\" alt=\"image.png\" /><br />\n 这里我就不多说，网上 git 的安装教程很多的，按照流程进行安装就可以了</p>\n<h3 id=\"22-安装-nodejs\"><a class=\"anchor\" href=\"#22-安装-nodejs\">#</a> 2.2、安装 Node.js</h3>\n<p><span class=\"exturl\" data-url=\"aHR0cDovL25vZGVqcy5jbi9kb3dubG9hZC8=\">Node.js 官网下载</span><br />\n根据自身系统下载对应的安装包<br />\n.msi 和.zip 格式区别：<br />\n.msi 是 Windows installer 开发出来的程序安装文件，它可以让你安装，修改，卸载你所安装的程序。说白了.msi 就是 Windows installer 的数据包，把所有和安装文件相关的内容封装在一个包里。此外：它还包含有关安装过程自己的信息。例如：安装序列、目标文件夹路径、安装选项和控制安装过程的属性。<br />\n.zip 是一个压缩包，解压之后即可，不需要安装<br />\n<img data-src=\"https://img-blog.csdnimg.cn/img_convert/5237a1e95b35db80fa631481af878baf.png\" alt=\"image.png\" /><br />\n 这里我选择的是.zip, 所以下载之后直接解压缩的<br />\n然后配置环境变量<br />\n<img data-src=\"https://img-blog.csdnimg.cn/3ffd6d5c9eba4773bc279ff726949bf7.png\" alt=\"image.png\" /><br />\n 在安装目录下新建两个文件夹【node_global】和【node_cache】<br />\n<img data-src=\"https://img-blog.csdnimg.cn/img_convert/0a1bc36a6e62702a070daf2764577a32.png\" alt=\"image.png\" /><br />\n 再次打开 cmd 命令窗口，输入 npm config set prefix “你的路径 \\node_global” 和 “你的路径 \\node_cache”</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> config <span class=\"token builtin class-name\">set</span> prefix <span class=\"token string\">\"E:\\KF<span class=\"token entity\" title=\"\\n\">\\n</span>odejs<span class=\"token entity\" title=\"\\n\">\\n</span>ode_global\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">npm</span> config <span class=\"token builtin class-name\">set</span> cache <span class=\"token string\">\"E:\\KF<span class=\"token entity\" title=\"\\n\">\\n</span>odejs<span class=\"token entity\" title=\"\\n\">\\n</span>ode_cache\"</span></pre></td></tr></table></figure><p>最后将 E:\\KF\\nodejs\\node_global 和 E:\\KF\\nodejs\\node_cache 两个路径配到环境变量里面，这样 node.js 就配置完成了<br />\n由于 npm 安装模块时都是去国外的镜像下载的，可是有的时候因为网络等缘由致使安装模块失败，所以我们可以配置一下阿里云的镜像来加快速度。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> config <span class=\"token builtin class-name\">set</span> registry https://registry.npm.taobao.org</pre></td></tr></table></figure><p>至此 git 和 node.js 就安装好了，下面创建博客专用的个人仓库。</p>\n<h3 id=\"23-创建博客专用的个人仓库\"><a class=\"anchor\" href=\"#23-创建博客专用的个人仓库\">#</a> 2.3、创建博客专用的个人仓库</h3>\n<p><img data-src=\"https://img-blog.csdnimg.cn/img_convert/0a7e32348477876112580754876857a0.png\" alt=\"image.png\" /><br />\n 在<span class=\"exturl\" data-url=\"aHR0cHM6Ly9zby5jc2RuLm5ldC9zby9zZWFyY2g/cT1HaXRodWImYW1wO3NwbT0xMDAxLjIxMDEuMzAwMS43MDIw\"> Github</span> 上创建一个以 yourname.github.io 为名字的仓库，在填写地址的时候注意，这个地址是就是你的域名，以 github.io 结尾，我这边报错是已经创建过了，名字没问题，下面可以进行博客的创建了。</p>\n<h3 id=\"24-安装-hexo\"><a class=\"anchor\" href=\"#24-安装-hexo\">#</a> 2.4、安装 Hexo</h3>\n<p>选择你要安装的地方，创建文件夹（比如说我创建的是 blog，你随意），使用 npm 安装 Hexo，下面的命令是表示全局安装 hexo（对于新手还是全局安装比较好）</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> <span class=\"token parameter variable\">-g</span> hexo-cli</pre></td></tr></table></figure><p>对于熟悉 npm 的进阶用户，可以仅局部安装 hexo 包。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> hexo</pre></td></tr></table></figure><p>对于 node.js 的版本，我们建议安装最新的，下面是 Hexo 的版本对 node.js 的要求</p>\n<table>\n<thead>\n<tr>\n<th><strong>Hexo 版本</strong></th>\n<th><strong>最低版本 (Node.js 版本)</strong></th>\n<th><strong>最高版本 (Node.js 版本)</strong></th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>6.2+</td>\n<td>12.13.0</td>\n<td>latest</td>\n</tr>\n<tr>\n<td>6.0+</td>\n<td>12.13.0</td>\n<td>18.5.0</td>\n</tr>\n<tr>\n<td>5.0+</td>\n<td>10.13.0</td>\n<td>12.0.0</td>\n</tr>\n<tr>\n<td>4.1 - 4.2</td>\n<td>8.10</td>\n<td>10.0.0</td>\n</tr>\n<tr>\n<td>4.0</td>\n<td>8.6</td>\n<td>8.10.0</td>\n</tr>\n<tr>\n<td>3.3 - 3.9</td>\n<td>6.9</td>\n<td>8.0.0</td>\n</tr>\n<tr>\n<td>3.2 - 3.3</td>\n<td>0.12</td>\n<td>未知</td>\n</tr>\n<tr>\n<td>3.0 - 3.1</td>\n<td>0.10 或 iojs</td>\n<td>未知</td>\n</tr>\n<tr>\n<td>0.0.1 - 2.8</td>\n<td>0.10</td>\n<td>未知</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"3-搭建博客\"><a class=\"anchor\" href=\"#3-搭建博客\">#</a> 3、搭建博客</h1>\n<h3 id=\"31-搭建简易的博客\"><a class=\"anchor\" href=\"#31-搭建简易的博客\">#</a> 3.1、搭建简易的博客</h3>\n<p>安装 Hexo 完成后，请执行下列命令，Hexo 将会在指定文件夹中新建所需要的文件。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 这里的 folder 是博客项目名称，你随意</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>hexo init <span class=\"token operator\">&lt;</span>folder<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token builtin class-name\">cd</span> <span class=\"token operator\">&lt;</span>folder<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span></pre></td></tr></table></figure><p>新建完成后，指定文件夹的目录如下：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>hexo/ </pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token operator\">|</span>-- node_modules/   <span class=\"token comment\"># 放置 npm 的包</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token operator\">|</span>-- scaffolds/      <span class=\"token comment\"># 储存文章模板</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token operator\">|</span>-- source/\t\t\t\t\t<span class=\"token comment\"># 储存文章和部分资源</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token operator\">|</span>-- themes/\t\t\t\t\t<span class=\"token comment\"># 储存主题</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token operator\">|</span>-- _config.xxx.yml <span class=\"token comment\"># 是肢体的 plus 版配置文件（xxx 须更改文主题名）</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token operator\">|</span>-- _config.yml\t\t\t<span class=\"token comment\"># hexo 的主要配置文件</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token operator\">|</span>-- package.json    <span class=\"token comment\"># npm 依赖的包 json</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre><span class=\"token operator\">|</span>-- package-lock.json</pre></td></tr></table></figure><p>输入下面指令加载 hexo 基础 html、css、js 等文件。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>hexo g</pre></td></tr></table></figure><p>在这完成后等于已经在本地创建了一个网页，我们可以输入 hexo s 开启本地服务器</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>hexo s</pre></td></tr></table></figure><p>在浏览器输入 localhost:4000 就可以看到我们的博客了<br />\n<img data-src=\"https://img-blog.csdnimg.cn/img_convert/d671af7cd0d8df56d7bbcb8f5e32b2ac.png\" alt=\"image.png\" /><br />\n 至此最基础的一个博客就建好了，将该 hexo 上传到 github 对应的项目里面，那么使用 github.io 访问的将是一个默认的页面。但是这个博客说实话有点简陋，下面介绍如何选择自己导入自己喜欢的模板。<br />\n我这里选的是我在上面提到的<span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL3RoZW1lLXNob2thLXgvaGV4by10aGVtZS1zaG9rYVg=\"> hexo-theme-shokaX</span> 主题，下面就是如何配置了</p>\n<h3 id=\"32-安装主题\"><a class=\"anchor\" href=\"#32-安装主题\">#</a> 3.2、安装主题</h3>\n<p>在 hexo 项目文件夹中克隆 shoka 主题到本地，这边是直接克隆到当前文件 /thems/shoka 文件下面</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">git</span> clone https://gitee.com/zkz0/hexo-theme-shoka.git ./themes/shoka <span class=\"token comment\">#gitee 镜像源</span></pre></td></tr></table></figure><p>打开根目录 _config.yml，修改 theme 为 shoka</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># Extensions</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">## Plugins: https://hexo.io/plugins/</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\">## Themes: https://hexo.io/themes/</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>theme: shoka</pre></td></tr></table></figure><p>安装 shoka 主题的 md 渲染器插件:</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># cd &lt;your_blog></span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">npm</span> remove hexo-renderer-marked <span class=\"token comment\"># 删除原本的插件</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">npm</span> i hexo-renderer-multi-markdown-it  <span class=\"token comment\">#由博主制作的全新版本渲染器，建议安装</span></pre></td></tr></table></figure><p>安装 shoka 的插件</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> i hexo-theme-shokax</pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token function\">npm</span> i hexo-autoprefixer</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token function\">npm</span> i hexo-algoliasearch</pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token function\">npm</span> i hexo-feed</pre></td></tr></table></figure><p>下面的配置大家可以参考<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cua2FpdGFrdS54eXovd2ViYnVpbGQvaGV4by9oZXhvd2ViMi8=\"> https://www.kaitaku.xyz/webbuild/hexo/hexoweb2/</span>，不过要注意一下这部分<br />\n<img data-src=\"https://img-blog.csdnimg.cn/img_convert/f690cdd3e4bc21bff095fa5cb0b75392.png\" alt=\"image.png\" /><br />\n 我之前在这边没看清，配置错误花了很大的功夫才配置好，所以还是注意一下比较好。<br />\n** 最后是配置 hexo，** 打开根目录 _config.yml</p>\n<figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># Site</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token key atrule\">title</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#你的站点名，你的网站名字还需要到 /theme/_config.yml 文件中修改一下</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token key atrule\">subtitle</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#副标题 (小标题)</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token key atrule\">description</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#站点描述，卸载你的头像下面，相当于个性标签</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token key atrule\">keywords</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#关键字，用半角逗号分隔</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token key atrule\">author</span><span class=\"token punctuation\">:</span> <span class=\"token comment\">#作者名</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token key atrule\">language</span><span class=\"token punctuation\">:</span> zh<span class=\"token punctuation\">-</span>CN <span class=\"token comment\">#中文为 zh-CN</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token key atrule\">timezone</span><span class=\"token punctuation\">:</span> <span class=\"token string\">'Asia/Shanghai'</span> <span class=\"token comment\">#东八区时区</span></pre></td></tr></table></figure><figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># URL</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token comment\">## Set your site url here. For example, if you use GitHub Page, set url as 'https://username.github.io/project'</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token key atrule\">url</span><span class=\"token punctuation\">:</span> https<span class=\"token punctuation\">:</span>//www.example.com <span class=\"token comment\">#你的 url, 这边表示你博客上面文章的真实路径</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token key atrule\">permalink</span><span class=\"token punctuation\">:</span> <span class=\"token punctuation\">:</span>title/ <span class=\"token comment\">#推荐这样，有利于 SEO</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre><span class=\"token key atrule\">permalink_defaults</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre><span class=\"token key atrule\">pretty_urls</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre><span class=\"token key atrule\">trailing_index</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span> <span class=\"token comment\"># Set to false to remove trailing 'index.html' from permalinks</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre><span class=\"token key atrule\">trailing_html</span><span class=\"token punctuation\">:</span> <span class=\"token boolean important\">true</span> <span class=\"token comment\"># Set to false to remove trailing '.html' from permalinks</span></pre></td></tr></table></figure><figure class=\"highlight yaml\"><figcaption data-lang=\"YAML\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token key atrule\">deploy</span><span class=\"token punctuation\">:</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre><span class=\"token key atrule\">type</span><span class=\"token punctuation\">:</span> git</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token key atrule\">repo</span><span class=\"token punctuation\">:</span> https<span class=\"token punctuation\">:</span>//github.com/yourname/yourname.github.io.git <span class=\"token comment\">#你的 GitHub 的仓库地址</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre><span class=\"token key atrule\">branch</span><span class=\"token punctuation\">:</span> main  <span class=\"token comment\">#主分支的名字</span></pre></td></tr></table></figure><p>还有一点需要注意，就是设置 branch 的时候，注意一下现在 git 的主分支叫做 main，不是 master，别弄错了<br />\n在上面配置好了之后我们可以在你博客的根目录打开终端，输入以下命令:</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token comment\"># 如果你打开的是 cmd 或者 git bash 也可以一个一个输入的，没有要求</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>hexo clean <span class=\"token operator\">&amp;&amp;</span> hexo g <span class=\"token operator\">&amp;&amp;</span> hexo s</pre></td></tr><tr><td data-num=\"3\"></td><td><pre><span class=\"token comment\"># 如果你打开的是 powershell</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>hexo clean <span class=\"token punctuation\">;</span> hexo g <span class=\"token punctuation\">;</span> hexo s</pre></td></tr></table></figure><p>hexo clean 是用来清除过程文件的 (没用的文件)<br />\n hexo g 就是根据配置生成文件 html，css 和 JavaScript 文件 (generate)<br />\n hexo s 是在本地开启一个服务，供我们本地预览 (server)<br />\n 在浏览器输入 localhost:4000 我们就能看到下面的博客了，不过其实有些内容还是没有的，我们要去 /theme/shoka/_config_yml 文件夹下面去配置一下才可以。<br />\n<img data-src=\"https://img-blog.csdnimg.cn/img_convert/7a828093949d2d511eaf2022a788fdcb.png\" alt=\"image.png\" /><br />\n<strong> 配置头像</strong>我们要去 \\themes\\shoka\\source\\images 文件夹下面找到 avatar.jpg 然后替换成自己的头像就可以了，还有注意把收款码的图片也配置一下。<br />\n<strong>配置导航栏</strong>是在 /theme/shoka/_config_yml 中添加下面的一段代码就可以了<br />\n<img data-src=\"https://img-blog.csdnimg.cn/img_convert/2669096436f3110d127164a062a057d2.png\" alt=\"image.png\" /><br />\n<strong> 配置社交链接</strong>也是在 /theme/shoka/_config_yml 中添加下面的一段代码就可以了<br />\n<img data-src=\"https://img-blog.csdnimg.cn/e9dedbfc99154c839c626069a462c492.png\" alt=\"image.png\" /><br />\n<strong> 配置背景音乐</strong>的地方也在 /theme/shoka/_config_yml<br />\n<img data-src=\"https://img-blog.csdnimg.cn/img_convert/4e3a7c218497eb6665d291cded415dc4.png\" alt=\"image.png\" /><br />\n 等等有蛮多可以去配置的地方，你可以参考官方给出的<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kb2NzLmthaXRha3UueHl6Lw==\">配置文档</span>去配置</p>\n<h3 id=\"33-文章的分类\"><a class=\"anchor\" href=\"#33-文章的分类\">#</a> 3.3、文章的分类</h3>\n<p>还有个<strong>文章的分类</strong>需要说一下。你在博客上面写文章要进行分类的话，可以使用主题自带的分类功能。主题默认带有不少菜单，如关于（about）、分类（categories）、标签（tags）等，默认处于注释状态，将需要取消的菜单注释掉，然后生成相应的 page 即可。就是上边的 menu 部分。<br />\n这是因为我们需要运行如下命令新建相关 page</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>hexo new page <span class=\"token string\">\"about\"</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>hexo new page <span class=\"token string\">\"tags\"</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>hexo new page <span class=\"token string\">\"categories\"</span></pre></td></tr></table></figure><p>新建 page 后，会在 source 目录下新建 about、tags、categories 文件夹，每个文件夹下还会创建一个 index.md 文件表示关于、标签页分类页面，编辑这三个 markdown 文件可以自定义这三个页面的内容.<br />\n 然后编辑各页面对应的 index.md 文件，增加 type 即可。注意冒号：后必须空一格，title 和 date 是默认生成的。重新部署后能够看到效果。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>---</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>title: about</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>date: <span class=\"token number\">2023</span>-07-22 <span class=\"token number\">15</span>:21:30</pre></td></tr><tr><td data-num=\"4\"></td><td><pre>type: <span class=\"token string\">\"about\"</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>---</pre></td></tr><tr><td data-num=\"6\"></td><td><pre></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>---</pre></td></tr><tr><td data-num=\"8\"></td><td><pre>title: tages</pre></td></tr><tr><td data-num=\"9\"></td><td><pre>date: <span class=\"token number\">2023</span>-07-22 <span class=\"token number\">15</span>:21:30</pre></td></tr><tr><td data-num=\"10\"></td><td><pre>type: <span class=\"token string\">\"tags\"</span></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>---</pre></td></tr><tr><td data-num=\"12\"></td><td><pre></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>---</pre></td></tr><tr><td data-num=\"14\"></td><td><pre>title: categories</pre></td></tr><tr><td data-num=\"15\"></td><td><pre>date: <span class=\"token number\">2023</span>-07-22 <span class=\"token number\">15</span>:21:30</pre></td></tr><tr><td data-num=\"16\"></td><td><pre>type: <span class=\"token string\">\"categories\"</span></pre></td></tr><tr><td data-num=\"17\"></td><td><pre>---</pre></td></tr></table></figure><p>在新建博文的头部，直接输入该博文的分类、标签等即可。分类只能有一个，标签能有多个，多个标签不能一行，注意下面的格式。</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>---</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>title: Hello World <span class=\"token comment\"># 标题</span></pre></td></tr><tr><td data-num=\"3\"></td><td><pre>date: <span class=\"token number\">2023</span>/7/22 hh:mm:ss <span class=\"token comment\"># 时间</span></pre></td></tr><tr><td data-num=\"4\"></td><td><pre>categories: <span class=\"token comment\"># 分类</span></pre></td></tr><tr><td data-num=\"5\"></td><td><pre>  - 分类  <span class=\"token comment\"># 只能由一个</span></pre></td></tr><tr><td data-num=\"6\"></td><td><pre>tags: <span class=\"token comment\"># 标签</span></pre></td></tr><tr><td data-num=\"7\"></td><td><pre>  - python  <span class=\"token comment\"># 能有多个</span></pre></td></tr><tr><td data-num=\"8\"></td><td><pre>  - <span class=\"token function\">java</span>  <span class=\"token comment\"># 一个标签一行</span></pre></td></tr><tr><td data-num=\"9\"></td><td><pre>---</pre></td></tr><tr><td data-num=\"10\"></td><td><pre></pre></td></tr><tr><td data-num=\"11\"></td><td><pre>摘要</pre></td></tr><tr><td data-num=\"12\"></td><td><pre><span class=\"token operator\">&lt;</span><span class=\"token operator\">!</span>--more--<span class=\"token operator\">></span></pre></td></tr><tr><td data-num=\"13\"></td><td><pre>正文</pre></td></tr></table></figure><p>至此一个符合自己爱好的博客算是搭建完成了吧，然后就可以部署到 github 上面了</p>\n<h1 id=\"4-部署博客\"><a class=\"anchor\" href=\"#4-部署博客\">#</a> 4、部署博客</h1>\n<p>先安装部署的命令 hexo-deployer-git：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> hexo-deployer-git <span class=\"token parameter variable\">--save</span></pre></td></tr></table></figure><p>之后运行下面的命令：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre>hexo clean</pre></td></tr><tr><td data-num=\"2\"></td><td><pre>hexo g</pre></td></tr><tr><td data-num=\"3\"></td><td><pre>hexo d</pre></td></tr></table></figure><p>这个时候访问域名 yourname.github.io 即可看到主页了<br />\n<img data-src=\"https://blog.csdn.net/weixin_64797822/article/details/131930139?spm=1001.2014.3001.5502\" alt=\"image.png\" /><br />\n 不过我当时打开的时候图片没有出现，所以我又安装了安装插件 hexo-asset-img：</p>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"></figcaption><table><tr><td data-num=\"1\"></td><td><pre><span class=\"token function\">npm</span> <span class=\"token function\">install</span> hexo-asset-img <span class=\"token parameter variable\">--save</span></pre></td></tr><tr><td data-num=\"2\"></td><td><pre>hexo clean <span class=\"token operator\">&amp;&amp;</span> hexo g <span class=\"token operator\">&amp;&amp;</span> hexo s</pre></td></tr></table></figure><p>之后再次打开博客，我的博客就正常了，至此我的博客配置结束了。</p>\n",
            "tags": [
                "config",
                "config",
                "hexo",
                "github"
            ]
        },
        {
            "id": "http://yishan.blog/2023/07/25/mysql/MySQL/",
            "url": "http://yishan.blog/2023/07/25/mysql/MySQL/",
            "title": "mysql",
            "date_published": "2023-07-25T08:57:05.000Z",
            "content_html": "<h1 id=\"基础篇\"><a class=\"anchor\" href=\"#基础篇\">#</a> 基础篇</h1>\n<h2 id=\"通用语法及分类\"><a class=\"anchor\" href=\"#通用语法及分类\">#</a> 通用语法及分类</h2>\n<ul>\n<li>DDL: 数据定义语言，用来定义数据库对象（数据库、表、字段）</li>\n<li>DML: 数据操作语言，用来对数据库表中的数据进行增删改</li>\n<li>DQL: 数据查询语言，用来查询数据库中表的记录</li>\n<li>DCL: 数据控制语言，用来创建数据库用户、控制数据库的控制权限</li>\n</ul>\n<h3 id=\"ddl数据定义语言\"><a class=\"anchor\" href=\"#ddl数据定义语言\">#</a> DDL（数据定义语言）</h3>\n<p>数据定义语言</p>\n<h4 id=\"数据库操作\"><a class=\"anchor\" href=\"#数据库操作\">#</a> 数据库操作</h4>\n<p>查询所有数据库：<br />\n <code>SHOW DATABASES;</code> <br />\n 查询当前数据库：<br />\n <code>SELECT DATABASE();</code> <br />\n 创建数据库：<br />\n <code>CREATE DATABASE [ IF NOT EXISTS ] 数据库名 [ DEFAULT CHARSET 字符集] [COLLATE 排序规则 ];</code> <br />\n 删除数据库：<br />\n <code>DROP DATABASE [ IF EXISTS ] 数据库名;</code> <br />\n 使用数据库：<br />\n <code>USE 数据库名;</code></p>\n<h5 id=\"注意事项\"><a class=\"anchor\" href=\"#注意事项\">#</a> 注意事项</h5>\n<ul>\n<li>UTF8 字符集长度为 3 字节，有些符号占 4 字节，所以推荐用 utf8mb4 字符集</li>\n</ul>\n<h4 id=\"表操作\"><a class=\"anchor\" href=\"#表操作\">#</a> 表操作</h4>\n<p>查询当前数据库所有表：<br />\n <code>SHOW TABLES;</code> <br />\n 查询表结构：<br />\n <code>DESC 表名;</code> <br />\n 查询指定表的建表语句：<br />\n <code>SHOW CREATE TABLE 表名;</code></p>\n<p>创建表：</p>\n<pre><code>CREATE TABLE 表名(\n\t字段1 字段1类型 [COMMENT 字段1注释],\n\t字段2 字段2类型 [COMMENT 字段2注释],\n\t字段3 字段3类型 [COMMENT 字段3注释],\n\t...\n\t字段n 字段n类型 [COMMENT 字段n注释]\n)[ COMMENT 表注释 ];\n</code></pre>\n<p><strong>最后一个字段后面没有逗号</strong></p>\n<p>添加字段：<br />\n <code>ALTER TABLE 表名 ADD 字段名 类型(长度) [COMMENT 注释] [约束];</code> <br />\n 例： <code>ALTER TABLE emp ADD nickname varchar(20) COMMENT '昵称';</code></p>\n<p>修改数据类型：<br />\n <code>ALTER TABLE 表名 MODIFY 字段名 新数据类型(长度);</code> <br />\n 修改字段名和字段类型：<br />\n <code>ALTER TABLE 表名 CHANGE 旧字段名 新字段名 类型(长度) [COMMENT 注释] [约束];</code> <br />\n 例：将 emp 表的 nickname 字段修改为 username，类型为 varchar (30)<br />\n <code>ALTER TABLE emp CHANGE nickname username varchar(30) COMMENT '昵称';</code></p>\n<p>删除字段：<br />\n <code>ALTER TABLE 表名 DROP 字段名;</code></p>\n<p>修改表名：<br />\n <code>ALTER TABLE 表名 RENAME TO 新表名</code></p>\n<p>删除表：<br />\n <code>DROP TABLE [IF EXISTS] 表名;</code> <br />\n 删除表，并重新创建该表：<br />\n <code>TRUNCATE TABLE 表名;</code></p>\n<h3 id=\"dml数据操作语言\"><a class=\"anchor\" href=\"#dml数据操作语言\">#</a> DML（数据操作语言）</h3>\n<h4 id=\"添加数据\"><a class=\"anchor\" href=\"#添加数据\">#</a> 添加数据</h4>\n<p>指定字段：<br />\n <code>INSERT INTO 表名 (字段名1, 字段名2, ...) VALUES (值1, 值2, ...);</code> <br />\n 全部字段：<br />\n <code>INSERT INTO 表名 VALUES (值1, 值2, ...);</code></p>\n<p>批量添加数据：<br />\n <code>INSERT INTO 表名 (字段名1, 字段名2, ...) VALUES (值1, 值2, ...), (值1, 值2, ...), (值1, 值2, ...);</code> <br />\n <code>INSERT INTO 表名 VALUES (值1, 值2, ...), (值1, 值2, ...), (值1, 值2, ...);</code></p>\n<h5 id=\"注意事项-2\"><a class=\"anchor\" href=\"#注意事项-2\">#</a> 注意事项</h5>\n<ul>\n<li>字符串和日期类型数据应该包含在引号中</li>\n<li>插入的数据大小应该在字段的规定范围内</li>\n</ul>\n<h4 id=\"更新和删除数据\"><a class=\"anchor\" href=\"#更新和删除数据\">#</a> 更新和删除数据</h4>\n<p>修改数据：<br />\n <code>UPDATE 表名 SET 字段名1 = 值1, 字段名2 = 值2, ... [ WHERE 条件 ];</code> <br />\n 例：<br />\n <code>UPDATE emp SET name = 'Jack' WHERE id = 1;</code></p>\n<p>删除数据：<br />\n <code>DELETE FROM 表名 [ WHERE 条件 ];</code></p>\n<h3 id=\"dql数据查询语言\"><a class=\"anchor\" href=\"#dql数据查询语言\">#</a> DQL（数据查询语言）</h3>\n<p>语法：</p>\n<pre><code>SELECT\n\t字段列表\nFROM\n\t表名字段\nWHERE\n\t条件列表\nGROUP BY\n\t分组字段列表\nHAVING\n\t分组后的条件列表\nORDER BY\n\t排序字段列表\nLIMIT\n\t分页参数\n</code></pre>\n<h4 id=\"基础查询\"><a class=\"anchor\" href=\"#基础查询\">#</a> 基础查询</h4>\n<p>查询多个字段：<br />\n <code>SELECT 字段1, 字段2, 字段3, ... FROM 表名;</code> <br />\n <code>SELECT * FROM 表名;</code></p>\n<p>设置别名：<br />\n <code>SELECT 字段1 [ AS 别名1 ], 字段2 [ AS 别名2 ], 字段3 [ AS 别名3 ], ... FROM 表名;</code> <br />\n <code>SELECT 字段1 [ 别名1 ], 字段2 [ 别名2 ], 字段3 [ 别名3 ], ... FROM 表名;</code></p>\n<p>去除重复记录：<br />\n <code>SELECT DISTINCT 字段列表 FROM 表名;</code></p>\n<p>转义：<br />\n <code>SELECT * FROM 表名 WHERE name LIKE '/_张三' ESCAPE '/'</code> <br />\n/ 之后的_不作为通配符</p>\n<h4 id=\"条件查询\"><a class=\"anchor\" href=\"#条件查询\">#</a> 条件查询</h4>\n<p>语法：<br />\n <code>SELECT 字段列表 FROM 表名 WHERE 条件列表;</code></p>\n<p>条件：</p>\n<table>\n<thead>\n<tr>\n<th>比较运算符</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>&gt;</td>\n<td>大于</td>\n</tr>\n<tr>\n<td>&gt;=</td>\n<td>大于等于</td>\n</tr>\n<tr>\n<td>&lt;</td>\n<td>小于</td>\n</tr>\n<tr>\n<td>&lt;=</td>\n<td>小于等于</td>\n</tr>\n<tr>\n<td>=</td>\n<td>等于</td>\n</tr>\n<tr>\n<td>&lt;&gt; 或！=</td>\n<td>不等于</td>\n</tr>\n<tr>\n<td>BETWEEN ... AND ...</td>\n<td>在某个范围内（含最小、最大值）</td>\n</tr>\n<tr>\n<td>IN(...)</td>\n<td>在 in 之后的列表中的值，多选一</td>\n</tr>\n<tr>\n<td>LIKE 占位符</td>\n<td>模糊匹配（_匹配单个字符，% 匹配任意个字符）</td>\n</tr>\n<tr>\n<td>IS NULL</td>\n<td>是 NULL</td>\n</tr>\n</tbody>\n<tbody>\n<tr>\n<td>逻辑运算符</td>\n<td>功能</td>\n</tr>\n<tr>\n<td>---</td>\n<td>---</td>\n</tr>\n<tr>\n<td>AND 或 &amp;&amp;</td>\n<td>并且（多个条件同时成立）</td>\n</tr>\n<tr>\n<td>OR 或 ||</td>\n<td>或者（多个条件任意一个成立）</td>\n</tr>\n<tr>\n<td>NOT 或！</td>\n<td>非，不是</td>\n</tr>\n</tbody>\n</table>\n<p>例子：</p>\n<pre><code>-- 年龄等于30\nselect * from employee where age = 30;\n-- 年龄小于30\nselect * from employee where age &lt; 30;\n-- 小于等于\nselect * from employee where age &lt;= 30;\n-- 没有身份证\nselect * from employee where idcard is null or idcard = '';\n-- 有身份证\nselect * from employee where idcard;\nselect * from employee where idcard is not null;\n-- 不等于\nselect * from employee where age != 30;\n-- 年龄在20到30之间\nselect * from employee where age between 20 and 30;\nselect * from employee where age &gt;= 20 and age &lt;= 30;\n-- 下面语句不报错，但查不到任何信息\nselect * from employee where age between 30 and 20;\n-- 性别为女且年龄小于30\nselect * from employee where age &lt; 30 and gender = '女';\n-- 年龄等于25或30或35\nselect * from employee where age = 25 or age = 30 or age = 35;\nselect * from employee where age in (25, 30, 35);\n-- 姓名为两个字\nselect * from employee where name like '__';\n-- 身份证最后为X\nselect * from employee where idcard like '%X';\n</code></pre>\n<h4 id=\"聚合查询聚合函数\"><a class=\"anchor\" href=\"#聚合查询聚合函数\">#</a> 聚合查询（聚合函数）</h4>\n<p>常见聚合函数：</p>\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>count</td>\n<td>统计数量</td>\n</tr>\n<tr>\n<td>max</td>\n<td>最大值</td>\n</tr>\n<tr>\n<td>min</td>\n<td>最小值</td>\n</tr>\n<tr>\n<td>avg</td>\n<td>平均值</td>\n</tr>\n<tr>\n<td>sum</td>\n<td>求和</td>\n</tr>\n</tbody>\n</table>\n<p>语法：<br />\n <code>SELECT 聚合函数(字段列表) FROM 表名;</code> <br />\n 例：<br />\n <code>SELECT count(id) from employee where workaddress = &quot;广东省&quot;;</code></p>\n<h4 id=\"分组查询\"><a class=\"anchor\" href=\"#分组查询\">#</a> 分组查询</h4>\n<p>语法：<br />\n <code>SELECT 字段列表 FROM 表名 [ WHERE 条件 ] GROUP BY 分组字段名 [ HAVING 分组后的过滤条件 ];</code></p>\n<p>where 和 having 的区别：</p>\n<ul>\n<li>执行时机不同：where 是分组之前进行过滤，不满足 where 条件不参与分组；having 是分组后对结果进行过滤。</li>\n<li>判断条件不同：where 不能对聚合函数进行判断，而 having 可以。</li>\n</ul>\n<p>例子：</p>\n<pre><code>-- 根据性别分组，统计男性和女性数量（只显示分组数量，不显示哪个是男哪个是女）\nselect count(*) from employee group by gender;\n-- 根据性别分组，统计男性和女性数量\nselect gender, count(*) from employee group by gender;\n-- 根据性别分组，统计男性和女性的平均年龄\nselect gender, avg(age) from employee group by gender;\n-- 年龄小于45，并根据工作地址分组\nselect workaddress, count(*) from employee where age &lt; 45 group by workaddress;\n-- 年龄小于45，并根据工作地址分组，获取员工数量大于等于3的工作地址\nselect workaddress, count(*) address_count from employee where age &lt; 45 group by workaddress having address_count &gt;= 3;\n</code></pre>\n<h5 id=\"注意事项-3\"><a class=\"anchor\" href=\"#注意事项-3\">#</a> 注意事项</h5>\n<ul>\n<li>执行顺序：where &gt; 聚合函数 &gt; having</li>\n<li>分组之后，查询的字段一般为聚合函数和分组字段，查询其他字段无任何意义</li>\n</ul>\n<h4 id=\"排序查询\"><a class=\"anchor\" href=\"#排序查询\">#</a> 排序查询</h4>\n<p>语法：<br />\n <code>SELECT 字段列表 FROM 表名 ORDER BY 字段1 排序方式1, 字段2 排序方式2;</code></p>\n<p>排序方式：</p>\n<ul>\n<li>ASC: 升序（默认）</li>\n<li>DESC: 降序</li>\n</ul>\n<p>例子：</p>\n<pre><code>-- 根据年龄升序排序\nSELECT * FROM employee ORDER BY age ASC;\nSELECT * FROM employee ORDER BY age;\n-- 两字段排序，根据年龄升序排序，入职时间降序排序\nSELECT * FROM employee ORDER BY age ASC, entrydate DESC;\n</code></pre>\n<h5 id=\"注意事项-4\"><a class=\"anchor\" href=\"#注意事项-4\">#</a> 注意事项</h5>\n<p>如果是多字段排序，当第一个字段值相同时，才会根据第二个字段进行排序</p>\n<h4 id=\"分页查询\"><a class=\"anchor\" href=\"#分页查询\">#</a> 分页查询</h4>\n<p>语法：<br />\n <code>SELECT 字段列表 FROM 表名 LIMIT 起始索引, 查询记录数;</code></p>\n<p>例子：</p>\n<pre><code>-- 查询第一页数据，展示10条\nSELECT * FROM employee LIMIT 0, 10;\n-- 查询第二页\nSELECT * FROM employee LIMIT 10, 10;\n</code></pre>\n<h5 id=\"注意事项-5\"><a class=\"anchor\" href=\"#注意事项-5\">#</a> 注意事项</h5>\n<ul>\n<li>起始索引从 0 开始，起始索引 = （查询页码 - 1） * 每页显示记录数</li>\n<li>分页查询是数据库的方言，不同数据库有不同实现，MySQL 是 LIMIT</li>\n<li>如果查询的是第一页数据，起始索引可以省略，直接简写 LIMIT 10</li>\n</ul>\n<h4 id=\"dql执行顺序\"><a class=\"anchor\" href=\"#dql执行顺序\">#</a> DQL 执行顺序</h4>\n<p>FROM -&gt; WHERE -&gt; GROUP BY -&gt; SELECT -&gt; ORDER BY -&gt; LIMIT</p>\n<h3 id=\"dcl\"><a class=\"anchor\" href=\"#dcl\">#</a> DCL</h3>\n<h4 id=\"管理用户\"><a class=\"anchor\" href=\"#管理用户\">#</a> 管理用户</h4>\n<p>查询用户：</p>\n<pre><code>USER mysql;\nSELECT * FROM user;\n</code></pre>\n<p>创建用户:<br />\n <code>CREATE USER '用户名'@'主机名' IDENTIFIED BY '密码';</code></p>\n<p>修改用户密码：<br />\n <code>ALTER USER '用户名'@'主机名' IDENTIFIED WITH mysql_native_password BY '新密码';</code></p>\n<p>删除用户：<br />\n <code>DROP USER '用户名'@'主机名';</code></p>\n<p>例子：</p>\n<pre><code>-- 创建用户test，只能在当前主机localhost访问\ncreate user 'test'@'localhost' identified by '123456';\n-- 创建用户test，能在任意主机访问\ncreate user 'test'@'%' identified by '123456';\ncreate user 'test' identified by '123456';\n-- 修改密码\nalter user 'test'@'localhost' identified with mysql_native_password by '1234';\n-- 删除用户\ndrop user 'test'@'localhost';\n</code></pre>\n<h5 id=\"注意事项-6\"><a class=\"anchor\" href=\"#注意事项-6\">#</a> 注意事项</h5>\n<ul>\n<li>主机名可以使用 % 通配</li>\n</ul>\n<h4 id=\"权限控制\"><a class=\"anchor\" href=\"#权限控制\">#</a> 权限控制</h4>\n<p>常用权限：</p>\n<table>\n<thead>\n<tr>\n<th>权限</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>ALL, ALL PRIVILEGES</td>\n<td>所有权限</td>\n</tr>\n<tr>\n<td>SELECT</td>\n<td>查询数据</td>\n</tr>\n<tr>\n<td>INSERT</td>\n<td>插入数据</td>\n</tr>\n<tr>\n<td>UPDATE</td>\n<td>修改数据</td>\n</tr>\n<tr>\n<td>DELETE</td>\n<td>删除数据</td>\n</tr>\n<tr>\n<td>ALTER</td>\n<td>修改表</td>\n</tr>\n<tr>\n<td>DROP</td>\n<td>删除数据库 / 表 / 视图</td>\n</tr>\n<tr>\n<td>CREATE</td>\n<td>创建数据库 / 表</td>\n</tr>\n</tbody>\n</table>\n<p>更多权限请看<a href=\"#%E6%9D%83%E9%99%90%E4%B8%80%E8%A7%88%E8%A1%A8\">权限一览表</a></p>\n<p>查询权限：<br />\n <code>SHOW GRANTS FOR '用户名'@'主机名';</code></p>\n<p>授予权限：<br />\n <code>GRANT 权限列表 ON 数据库名.表名 TO '用户名'@'主机名';</code></p>\n<p>撤销权限：<br />\n <code>REVOKE 权限列表 ON 数据库名.表名 FROM '用户名'@'主机名';</code></p>\n<h5 id=\"注意事项-7\"><a class=\"anchor\" href=\"#注意事项-7\">#</a> 注意事项</h5>\n<ul>\n<li>多个权限用逗号分隔</li>\n<li>授权时，数据库名和表名可以用 * 进行通配，代表所有</li>\n</ul>\n<h2 id=\"函数\"><a class=\"anchor\" href=\"#函数\">#</a> 函数</h2>\n<ul>\n<li>字符串函数</li>\n<li>数值函数</li>\n<li>日期函数</li>\n<li>流程函数</li>\n</ul>\n<h3 id=\"字符串函数\"><a class=\"anchor\" href=\"#字符串函数\">#</a> 字符串函数</h3>\n<p>常用函数：</p>\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>CONCAT(s1, s2, ..., sn)</td>\n<td>字符串拼接，将 s1, s2, ..., sn 拼接成一个字符串</td>\n</tr>\n<tr>\n<td>LOWER(str)</td>\n<td>将字符串全部转为小写</td>\n</tr>\n<tr>\n<td>UPPER(str)</td>\n<td>将字符串全部转为大写</td>\n</tr>\n<tr>\n<td>LPAD(str, n, pad)</td>\n<td>左填充，用字符串 pad 对 str 的左边进行填充，达到 n 个字符串长度</td>\n</tr>\n<tr>\n<td>RPAD(str, n, pad)</td>\n<td>右填充，用字符串 pad 对 str 的右边进行填充，达到 n 个字符串长度</td>\n</tr>\n<tr>\n<td>TRIM(str)</td>\n<td>去掉字符串头部和尾部的空格</td>\n</tr>\n<tr>\n<td>SUBSTRING(str, start, len)</td>\n<td>返回从字符串 str 从 start 位置起的 len 个长度的字符串</td>\n</tr>\n</tbody>\n</table>\n<p>使用示例：</p>\n<pre><code>-- 拼接\nSELECT CONCAT('Hello', 'World');\n-- 小写\nSELECT LOWER('Hello');\n-- 大写\nSELECT UPPER('Hello');\n-- 左填充\nSELECT LPAD('01', 5, '-');\n-- 右填充\nSELECT RPAD('01', 5, '-');\n-- 去除空格\nSELECT TRIM(' Hello World ');\n-- 切片（起始索引为1）\nSELECT SUBSTRING('Hello World', 1, 5);\n</code></pre>\n<h3 id=\"数值函数\"><a class=\"anchor\" href=\"#数值函数\">#</a> 数值函数</h3>\n<p>常见函数：</p>\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>CEIL(x)</td>\n<td>向上取整</td>\n</tr>\n<tr>\n<td>FLOOR(x)</td>\n<td>向下取整</td>\n</tr>\n<tr>\n<td>MOD(x, y)</td>\n<td>返回 x/y 的模</td>\n</tr>\n<tr>\n<td>RAND()</td>\n<td>返回 0~1 内的随机数</td>\n</tr>\n<tr>\n<td>ROUND(x, y)</td>\n<td>求参数 x 的四舍五入值，保留 y 位小数</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"日期函数\"><a class=\"anchor\" href=\"#日期函数\">#</a> 日期函数</h3>\n<p>常用函数：</p>\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>CURDATE()</td>\n<td>返回当前日期</td>\n</tr>\n<tr>\n<td>CURTIME()</td>\n<td>返回当前时间</td>\n</tr>\n<tr>\n<td>NOW()</td>\n<td>返回当前日期和时间</td>\n</tr>\n<tr>\n<td>YEAR(date)</td>\n<td>获取指定 date 的年份</td>\n</tr>\n<tr>\n<td>MONTH(date)</td>\n<td>获取指定 date 的月份</td>\n</tr>\n<tr>\n<td>DAY(date)</td>\n<td>获取指定 date 的日期</td>\n</tr>\n<tr>\n<td>DATE_ADD(date, INTERVAL expr type)</td>\n<td>返回一个日期 / 时间值加上一个时间间隔 expr 后的时间值</td>\n</tr>\n<tr>\n<td>DATEDIFF(date1, date2)</td>\n<td>返回起始时间 date1 和结束时间 date2 之间的天数</td>\n</tr>\n</tbody>\n</table>\n<p>例子：</p>\n<pre><code>-- DATE_ADD\nSELECT DATE_ADD(NOW(), INTERVAL 70 YEAR);\n</code></pre>\n<h3 id=\"流程函数\"><a class=\"anchor\" href=\"#流程函数\">#</a> 流程函数</h3>\n<p>常用函数：</p>\n<table>\n<thead>\n<tr>\n<th>函数</th>\n<th>功能</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>IF(value, t, f)</td>\n<td>如果 value 为 true，则返回 t，否则返回 f</td>\n</tr>\n<tr>\n<td>IFNULL(value1, value2)</td>\n<td>如果 value1 不为空，返回 value1，否则返回 value2</td>\n</tr>\n<tr>\n<td>CASE WHEN [ val1 ] THEN [ res1 ] ... ELSE [ default ] END</td>\n<td>如果 val1 为 true，返回 res1，... 否则返回 default 默认值</td>\n</tr>\n<tr>\n<td>CASE [ expr ] WHEN [ val1 ] THEN [ res1 ] ... ELSE [ default ] END</td>\n<td>如果 expr 的值等于 val1，返回 res1，... 否则返回 default 默认值</td>\n</tr>\n</tbody>\n</table>\n<p>例子：</p>\n<pre><code>select\n\tname,\n\t(case when age &gt; 30 then '中年' else '青年' end)\nfrom employee;\nselect\n\tname,\n\t(case workaddress when '北京市' then '一线城市' when '上海市' then '一线城市' else '二线城市' end) as '工作地址'\nfrom employee;\n</code></pre>\n<h2 id=\"约束\"><a class=\"anchor\" href=\"#约束\">#</a> 约束</h2>\n<p>分类：</p>\n<table>\n<thead>\n<tr>\n<th>约束</th>\n<th>描述</th>\n<th>关键字</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>非空约束</td>\n<td>限制该字段的数据不能为 null</td>\n<td>NOT NULL</td>\n</tr>\n<tr>\n<td>唯一约束</td>\n<td>保证该字段的所有数据都是唯一、不重复的</td>\n<td>UNIQUE</td>\n</tr>\n<tr>\n<td>主键约束</td>\n<td>主键是一行数据的唯一标识，要求非空且唯一</td>\n<td>PRIMARY KEY</td>\n</tr>\n<tr>\n<td>默认约束</td>\n<td>保存数据时，如果未指定该字段的值，则采用默认值</td>\n<td>DEFAULT</td>\n</tr>\n<tr>\n<td>检查约束（8.0.1 版本后）</td>\n<td>保证字段值满足某一个条件</td>\n<td>CHECK</td>\n</tr>\n<tr>\n<td>外键约束</td>\n<td>用来让两张图的数据之间建立连接，保证数据的一致性和完整性</td>\n<td>FOREIGN KEY</td>\n</tr>\n</tbody>\n</table>\n<p>约束是作用于表中字段上的，可以再创建表 / 修改表的时候添加约束。</p>\n<h3 id=\"常用约束\"><a class=\"anchor\" href=\"#常用约束\">#</a> 常用约束</h3>\n<table>\n<thead>\n<tr>\n<th>约束条件</th>\n<th>关键字</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>主键</td>\n<td>PRIMARY KEY</td>\n</tr>\n<tr>\n<td>自动增长</td>\n<td>AUTO_INCREMENT</td>\n</tr>\n<tr>\n<td>不为空</td>\n<td>NOT NULL</td>\n</tr>\n<tr>\n<td>唯一</td>\n<td>UNIQUE</td>\n</tr>\n<tr>\n<td>逻辑条件</td>\n<td>CHECK</td>\n</tr>\n<tr>\n<td>默认值</td>\n<td>DEFAULT</td>\n</tr>\n</tbody>\n</table>\n<p>例子：</p>\n<pre><code>create table user(\n\tid int primary key auto_increment,\n\tname varchar(10) not null unique,\n\tage int check(age &gt; 0 and age &lt; 120),\n\tstatus char(1) default '1',\n\tgender char(1)\n);\n</code></pre>\n<h3 id=\"外键约束\"><a class=\"anchor\" href=\"#外键约束\">#</a> 外键约束</h3>\n<p>添加外键：</p>\n<pre><code>CREATE TABLE 表名(\n\t字段名 字段类型,\n\t...\n\t[CONSTRAINT] [外键名称] FOREIGN KEY(外键字段名) REFERENCES 主表(主表列名)\n);\nALTER TABLE 表名 ADD CONSTRAINT 外键名称 FOREIGN KEY (外键字段名) REFERENCES 主表(主表列名);\n\n-- 例子\nalter table emp add constraint fk_emp_dept_id foreign key(dept_id) references dept(id);\n</code></pre>\n<p>删除外键：<br />\n <code>ALTER TABLE 表名 DROP FOREIGN KEY 外键名;</code></p>\n<h4 id=\"删除更新行为\"><a class=\"anchor\" href=\"#删除更新行为\">#</a> 删除 / 更新行为</h4>\n<table>\n<thead>\n<tr>\n<th>行为</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>NO ACTION</td>\n<td>当在父表中删除 / 更新对应记录时，首先检查该记录是否有对应外键，如果有则不允许删除 / 更新（与 RESTRICT 一致）</td>\n</tr>\n<tr>\n<td>RESTRICT</td>\n<td>当在父表中删除 / 更新对应记录时，首先检查该记录是否有对应外键，如果有则不允许删除 / 更新（与 NO ACTION 一致）</td>\n</tr>\n<tr>\n<td>CASCADE</td>\n<td>当在父表中删除 / 更新对应记录时，首先检查该记录是否有对应外键，如果有则也删除 / 更新外键在子表中的记录</td>\n</tr>\n<tr>\n<td>SET NULL</td>\n<td>当在父表中删除 / 更新对应记录时，首先检查该记录是否有对应外键，如果有则设置子表中该外键值为 null（要求该外键允许为 null）</td>\n</tr>\n<tr>\n<td>SET DEFAULT</td>\n<td>父表有变更时，子表将外键设为一个默认值（Innodb 不支持）</td>\n</tr>\n</tbody>\n</table>\n<p>更改删除 / 更新行为：<br />\n <code>ALTER TABLE 表名 ADD CONSTRAINT 外键名称 FOREIGN KEY (外键字段) REFERENCES 主表名(主表字段名) ON UPDATE 行为 ON DELETE 行为;</code></p>\n<h2 id=\"多表查询\"><a class=\"anchor\" href=\"#多表查询\">#</a> 多表查询</h2>\n<h3 id=\"多表关系\"><a class=\"anchor\" href=\"#多表关系\">#</a> 多表关系</h3>\n<ul>\n<li>一对多（多对一）</li>\n<li>多对多</li>\n<li>一对一</li>\n</ul>\n<h4 id=\"一对多\"><a class=\"anchor\" href=\"#一对多\">#</a> 一对多</h4>\n<p>案例：部门与员工<br />\n关系：一个部门对应多个员工，一个员工对应一个部门<br />\n实现：在多的一方建立外键，指向一的一方的主键</p>\n<h4 id=\"多对多\"><a class=\"anchor\" href=\"#多对多\">#</a> 多对多</h4>\n<p>案例：学生与课程<br />\n关系：一个学生可以选多门课程，一门课程也可以供多个学生选修<br />\n实现：建立第三张中间表，中间表至少包含两个外键，分别关联两方主键</p>\n<h4 id=\"一对一\"><a class=\"anchor\" href=\"#一对一\">#</a> 一对一</h4>\n<p>案例：用户与用户详情<br />\n关系：一对一关系，多用于单表拆分，将一张表的基础字段放在一张表中，其他详情字段放在另一张表中，以提升操作效率<br />\n实现：在任意一方加入外键，关联另外一方的主键，并且设置外键为唯一的（UNIQUE）</p>\n<h3 id=\"查询\"><a class=\"anchor\" href=\"#查询\">#</a> 查询</h3>\n<p>合并查询（笛卡尔积，会展示所有组合结果）：<br />\n <code>select * from employee, dept;</code></p>\n<blockquote>\n<p>笛卡尔积：两个集合 A 集合和 B 集合的所有组合情况（在多表查询时，需要消除无效的笛卡尔积）</p>\n</blockquote>\n<p>消除无效笛卡尔积：<br />\n <code>select * from employee, dept where employee.dept = dept.id;</code></p>\n<h3 id=\"内连接查询\"><a class=\"anchor\" href=\"#内连接查询\">#</a> 内连接查询</h3>\n<p>内连接查询的是两张表交集的部分</p>\n<p>隐式内连接：<br />\n <code>SELECT 字段列表 FROM 表1, 表2 WHERE 条件 ...;</code></p>\n<p>显式内连接：<br />\n <code>SELECT 字段列表 FROM 表1 [ INNER ] JOIN 表2 ON 连接条件 ...;</code></p>\n<p>显式性能比隐式高</p>\n<p>例子：</p>\n<pre><code>-- 查询员工姓名，及关联的部门的名称\n-- 隐式\nselect e.name, d.name from employee as e, dept as d where e.dept = d.id;\n-- 显式\nselect e.name, d.name from employee as e inner join dept as d on e.dept = d.id;\n</code></pre>\n<h3 id=\"外连接查询\"><a class=\"anchor\" href=\"#外连接查询\">#</a> 外连接查询</h3>\n<p>左外连接：<br />\n查询左表所有数据，以及两张表交集部分数据<br />\n <code>SELECT 字段列表 FROM 表1 LEFT [ OUTER ] JOIN 表2 ON 条件 ...;</code> <br />\n 相当于查询表 1 的所有数据，包含表 1 和表 2 交集部分数据</p>\n<p>右外连接：<br />\n查询右表所有数据，以及两张表交集部分数据<br />\n <code>SELECT 字段列表 FROM 表1 RIGHT [ OUTER ] JOIN 表2 ON 条件 ...;</code></p>\n<p>例子：</p>\n<pre><code>-- 左\nselect e.*, d.name from employee as e left outer join dept as d on e.dept = d.id;\nselect d.name, e.* from dept d left outer join emp e on e.dept = d.id;  -- 这条语句与下面的语句效果一样\n-- 右\nselect d.name, e.* from employee as e right outer join dept as d on e.dept = d.id;\n</code></pre>\n<p>左连接可以查询到没有 dept 的 employee，右连接可以查询到没有 employee 的 dept</p>\n<h3 id=\"自连接查询\"><a class=\"anchor\" href=\"#自连接查询\">#</a> 自连接查询</h3>\n<p>当前表与自身的连接查询，自连接必须使用表别名</p>\n<p>语法：<br />\n <code>SELECT 字段列表 FROM 表A 别名A JOIN 表A 别名B ON 条件 ...;</code></p>\n<p>自连接查询，可以是内连接查询，也可以是外连接查询</p>\n<p>例子：</p>\n<pre><code>-- 查询员工及其所属领导的名字\nselect a.name, b.name from employee a, employee b where a.manager = b.id;\n-- 没有领导的也查询出来\nselect a.name, b.name from employee a left join employee b on a.manager = b.id;\n</code></pre>\n<h3 id=\"联合查询-union-union-all\"><a class=\"anchor\" href=\"#联合查询-union-union-all\">#</a> 联合查询 union, union all</h3>\n<p>把多次查询的结果合并，形成一个新的查询集</p>\n<p>语法：</p>\n<pre><code>SELECT 字段列表 FROM 表A ...\nUNION [ALL]\nSELECT 字段列表 FROM 表B ...\n</code></pre>\n<h4 id=\"注意事项-8\"><a class=\"anchor\" href=\"#注意事项-8\">#</a> 注意事项</h4>\n<ul>\n<li>UNION ALL 会有重复结果，UNION 不会</li>\n<li>联合查询比使用 or 效率高，不会使索引失效</li>\n</ul>\n<h3 id=\"子查询\"><a class=\"anchor\" href=\"#子查询\">#</a> 子查询</h3>\n<p>SQL 语句中嵌套 SELECT 语句，称谓嵌套查询，又称子查询。<br />\n <code>SELECT * FROM t1 WHERE column1 = ( SELECT column1 FROM t2);</code> <br />\n<strong> 子查询外部的语句可以是 INSERT / UPDATE / DELETE / SELECT 的任何一个</strong></p>\n<p>根据子查询结果可以分为：</p>\n<ul>\n<li>标量子查询（子查询结果为单个值）</li>\n<li>列子查询（子查询结果为一列）</li>\n<li>行子查询（子查询结果为一行）</li>\n<li>表子查询（子查询结果为多行多列）</li>\n</ul>\n<p>根据子查询位置可分为：</p>\n<ul>\n<li>WHERE 之后</li>\n<li>FROM 之后</li>\n<li>SELECT 之后</li>\n</ul>\n<h4 id=\"标量子查询\"><a class=\"anchor\" href=\"#标量子查询\">#</a> 标量子查询</h4>\n<p>子查询返回的结果是单个值（数字、字符串、日期等）。<br />\n常用操作符：- &lt;&gt;&gt; &gt;= &lt; &lt;=</p>\n<p>例子：</p>\n<pre><code>-- 查询销售部所有员工\nselect id from dept where name = '销售部';\n-- 根据销售部部门ID，查询员工信息\nselect * from employee where dept = 4;\n-- 合并（子查询）\nselect * from employee where dept = (select id from dept where name = '销售部');\n\n-- 查询xxx入职之后的员工信息\nselect * from employee where entrydate &gt; (select entrydate from employee where name = 'xxx');\n</code></pre>\n<h4 id=\"列子查询\"><a class=\"anchor\" href=\"#列子查询\">#</a> 列子查询</h4>\n<p>返回的结果是一列（可以是多行）。</p>\n<p>常用操作符：</p>\n<table>\n<thead>\n<tr>\n<th>操作符</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>IN</td>\n<td>在指定的集合范围内，多选一</td>\n</tr>\n<tr>\n<td>NOT IN</td>\n<td>不在指定的集合范围内</td>\n</tr>\n<tr>\n<td>ANY</td>\n<td>子查询返回列表中，有任意一个满足即可</td>\n</tr>\n<tr>\n<td>SOME</td>\n<td>与 ANY 等同，使用 SOME 的地方都可以使用 ANY</td>\n</tr>\n<tr>\n<td>ALL</td>\n<td>子查询返回列表的所有值都必须满足</td>\n</tr>\n</tbody>\n</table>\n<p>例子：</p>\n<pre><code>-- 查询销售部和市场部的所有员工信息\nselect * from employee where dept in (select id from dept where name = '销售部' or name = '市场部');\n-- 查询比财务部所有人工资都高的员工信息\nselect * from employee where salary &gt; all(select salary from employee where dept = (select id from dept where name = '财务部'));\n-- 查询比研发部任意一人工资高的员工信息\nselect * from employee where salary &gt; any (select salary from employee where dept = (select id from dept where name = '研发部'));\n</code></pre>\n<h4 id=\"行子查询\"><a class=\"anchor\" href=\"#行子查询\">#</a> 行子查询</h4>\n<p>返回的结果是一行（可以是多列）。<br />\n常用操作符：=, &lt;,&gt;, IN, NOT IN</p>\n<p>例子：</p>\n<pre><code>-- 查询与xxx的薪资及直属领导相同的员工信息\nselect * from employee where (salary, manager) = (12500, 1);\nselect * from employee where (salary, manager) = (select salary, manager from employee where name = 'xxx');\n</code></pre>\n<h4 id=\"表子查询\"><a class=\"anchor\" href=\"#表子查询\">#</a> 表子查询</h4>\n<p>返回的结果是多行多列<br />\n常用操作符：IN</p>\n<p>例子：</p>\n<pre><code>-- 查询与xxx1，xxx2的职位和薪资相同的员工\nselect * from employee where (job, salary) in (select job, salary from employee where name = 'xxx1' or name = 'xxx2');\n-- 查询入职日期是2006-01-01之后的员工，及其部门信息\nselect e.*, d.* from (select * from employee where entrydate &gt; '2006-01-01') as e left join dept as d on e.dept = d.id;\n</code></pre>\n<h2 id=\"事务\"><a class=\"anchor\" href=\"#事务\">#</a> 事务</h2>\n<p>事务是一组操作的集合，事务会把所有操作作为一个整体一起向系统提交或撤销操作请求，即这些操作要么同时成功，要么同时失败。</p>\n<p>基本操作：</p>\n<pre><code>-- 1. 查询张三账户余额\nselect * from account where name = '张三';\n-- 2. 将张三账户余额-1000\nupdate account set money = money - 1000 where name = '张三';\n-- 此语句出错后张三钱减少但是李四钱没有增加\n模拟sql语句错误\n-- 3. 将李四账户余额+1000\nupdate account set money = money + 1000 where name = '李四';\n\n-- 查看事务提交方式\nSELECT @@AUTOCOMMIT;\n-- 设置事务提交方式，1为自动提交，0为手动提交，该设置只对当前会话有效\nSET @@AUTOCOMMIT = 0;\n-- 提交事务\nCOMMIT;\n-- 回滚事务\nROLLBACK;\n\n-- 设置手动提交后上面代码改为：\nselect * from account where name = '张三';\nupdate account set money = money - 1000 where name = '张三';\nupdate account set money = money + 1000 where name = '李四';\ncommit;\n</code></pre>\n<p>操作方式二：</p>\n<p>开启事务：<br />\n <code>START TRANSACTION 或 BEGIN TRANSACTION;</code> <br />\n 提交事务：<br />\n <code>COMMIT;</code> <br />\n 回滚事务：<br />\n <code>ROLLBACK;</code></p>\n<p>操作实例：</p>\n<pre><code>start transaction;\nselect * from account where name = '张三';\nupdate account set money = money - 1000 where name = '张三';\nupdate account set money = money + 1000 where name = '李四';\ncommit;\n</code></pre>\n<h3 id=\"四大特性acid\"><a class=\"anchor\" href=\"#四大特性acid\">#</a> 四大特性 ACID</h3>\n<ul>\n<li>原子性 (Atomicity)：事务是不可分割的最小操作但愿，要么全部成功，要么全部失败</li>\n<li>一致性 (Consistency)：事务完成时，必须使所有数据都保持一致状态</li>\n<li>隔离性 (Isolation)：数据库系统提供的隔离机制，保证事务在不受外部并发操作影响的独立环境下运行</li>\n<li>持久性 (Durability)：事务一旦提交或回滚，它对数据库中的数据的改变就是永久的</li>\n</ul>\n<h3 id=\"并发事务\"><a class=\"anchor\" href=\"#并发事务\">#</a> 并发事务</h3>\n<table>\n<thead>\n<tr>\n<th>问题</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>脏读</td>\n<td>一个事务读到另一个事务还没提交的数据</td>\n</tr>\n<tr>\n<td>不可重复读</td>\n<td>一个事务先后读取同一条记录，但两次读取的数据不同</td>\n</tr>\n<tr>\n<td>幻读</td>\n<td>一个事务按照条件查询数据时，没有对应的数据行，但是再插入数据时，又发现这行数据已经存在</td>\n</tr>\n</tbody>\n</table>\n<blockquote>\n<p>这三个问题的详细演示：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMUtyNHkxaTdydT9wPTU1Y2Q=\">https://www.bilibili.com/video/BV1Kr4y1i7ru?p=55cd</span></p>\n</blockquote>\n<p>并发事务隔离级别：</p>\n<table>\n<thead>\n<tr>\n<th>隔离级别</th>\n<th>脏读</th>\n<th>不可重复读</th>\n<th>幻读</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>Read uncommitted</td>\n<td>√</td>\n<td>√</td>\n<td>√</td>\n</tr>\n<tr>\n<td>Read committed</td>\n<td>×</td>\n<td>√</td>\n<td>√</td>\n</tr>\n<tr>\n<td>Repeatable Read (默认)</td>\n<td>×</td>\n<td>×</td>\n<td>√</td>\n</tr>\n<tr>\n<td>Serializable</td>\n<td>×</td>\n<td>×</td>\n<td>×</td>\n</tr>\n</tbody>\n</table>\n<ul>\n<li>√表示在当前隔离级别下该问题会出现</li>\n<li>Serializable 性能最低；Read uncommitted 性能最高，数据安全性最差</li>\n</ul>\n<p>查看事务隔离级别：<br />\n <code>SELECT @@TRANSACTION_ISOLATION;</code> <br />\n 设置事务隔离级别：<br />\n <code>SET [ SESSION | GLOBAL ] TRANSACTION ISOLATION LEVEL &#123;READ UNCOMMITTED | READ COMMITTED | REPEATABLE READ | SERIALIZABLE &#125;;</code> <br />\nSESSION 是会话级别，表示只针对当前会话有效，GLOBAL 表示对所有会话有效</p>\n<h1 id=\"进阶篇\"><a class=\"anchor\" href=\"#进阶篇\">#</a> 进阶篇</h1>\n<h2 id=\"存储引擎\"><a class=\"anchor\" href=\"#存储引擎\">#</a> 存储引擎</h2>\n<p>MySQL 体系结构：</p>\n<p><img data-src=\"https://dhc.pythonanywhere.com/media/editor/MySQL%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84_20220315034329549927.png#id=Mp9sX&amp;originHeight=732&amp;originWidth=1403&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=true&amp;status=done&amp;style=none&amp;title=%E7%BB%93%E6%9E%84%E5%9B%BE\" alt=\"结构图\" title=\"结构图\" /><br />\n<img data-src=\"https://dhc.pythonanywhere.com/media/editor/MySQL%E4%BD%93%E7%B3%BB%E7%BB%93%E6%9E%84%E5%B1%82%E7%BA%A7%E5%90%AB%E4%B9%89_20220315034359342837.png#id=SmiXV&amp;originHeight=649&amp;originWidth=1504&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=true&amp;status=done&amp;style=none&amp;title=%E5%B1%82%E7%BA%A7%E6%8F%8F%E8%BF%B0\" alt=\"层级描述\" title=\"层级描述\" /></p>\n<p>存储引擎就是存储数据、建立索引、更新 / 查询数据等技术的实现方式。存储引擎是基于表而不是基于库的，所以存储引擎也可以被称为表引擎。<br />\n默认存储引擎是 InnoDB。</p>\n<p>相关操作：</p>\n<pre><code>-- 查询建表语句\nshow create table account;\n-- 建表时指定存储引擎\nCREATE TABLE 表名(\n\t...\n) ENGINE=INNODB;\n-- 查看当前数据库支持的存储引擎\nshow engines;\n</code></pre>\n<h3 id=\"innodb\"><a class=\"anchor\" href=\"#innodb\">#</a> InnoDB</h3>\n<p>InnoDB 是一种兼顾高可靠性和高性能的通用存储引擎，在 MySQL 5.5 之后，InnoDB 是默认的 MySQL 引擎。</p>\n<p>特点：</p>\n<ul>\n<li>DML 操作遵循 ACID 模型，支持<strong>事务</strong></li>\n<li><strong>行级锁</strong>，提高并发访问性能</li>\n<li>支持<strong>外键</strong>约束，保证数据的完整性和正确性</li>\n</ul>\n<p>文件：</p>\n<ul>\n<li>xxx.ibd: xxx 代表表名，InnoDB 引擎的每张表都会对应这样一个表空间文件，存储该表的表结构（frm、sdi）、数据和索引。</li>\n</ul>\n<p>参数：innodb_file_per_table，决定多张表共享一个表空间还是每张表对应一个表空间</p>\n<p>知识点：</p>\n<p>查看 Mysql 变量：<br />\n <code>show variables like 'innodb_file_per_table';</code></p>\n<p>从 idb 文件提取表结构数据：<br />\n（在 cmd 运行）<br />\n <code>ibd2sdi xxx.ibd</code></p>\n<p>InnoDB 逻辑存储结构：<br />\n<img data-src=\"https://dhc.pythonanywhere.com/media/editor/%E9%80%BB%E8%BE%91%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84_20220316030616590001.png#id=dBY1l&amp;originHeight=651&amp;originWidth=1583&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=true&amp;status=done&amp;style=none&amp;title=InnoDB%E9%80%BB%E8%BE%91%E5%AD%98%E5%82%A8%E7%BB%93%E6%9E%84\" alt=\"InnoDB逻辑存储结构\" title=\"InnoDB逻辑存储结构\" /></p>\n<h3 id=\"myisam\"><a class=\"anchor\" href=\"#myisam\">#</a> MyISAM</h3>\n<p>MyISAM 是 MySQL 早期的默认存储引擎。</p>\n<p>特点：</p>\n<ul>\n<li>不支持事务，不支持外键</li>\n<li>支持表锁，不支持行锁</li>\n<li>访问速度快</li>\n</ul>\n<p>文件：</p>\n<ul>\n<li>xxx.sdi: 存储表结构信息</li>\n<li>xxx.MYD: 存储数据</li>\n<li>xxx.MYI: 存储索引</li>\n</ul>\n<h3 id=\"memory\"><a class=\"anchor\" href=\"#memory\">#</a> Memory</h3>\n<p>Memory 引擎的表数据是存储在内存中的，受硬件问题、断电问题的影响，只能将这些表作为临时表或缓存使用。</p>\n<p>特点：</p>\n<ul>\n<li>存放在内存中，速度快</li>\n<li>hash 索引（默认）</li>\n</ul>\n<p>文件：</p>\n<ul>\n<li>xxx.sdi: 存储表结构信息</li>\n</ul>\n<h3 id=\"存储引擎特点\"><a class=\"anchor\" href=\"#存储引擎特点\">#</a> 存储引擎特点</h3>\n<table>\n<thead>\n<tr>\n<th>特点</th>\n<th>InnoDB</th>\n<th>MyISAM</th>\n<th>Memory</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>存储限制</td>\n<td>64TB</td>\n<td>有</td>\n<td>有</td>\n</tr>\n<tr>\n<td>事务安全</td>\n<td>支持</td>\n<td>-</td>\n<td>-</td>\n</tr>\n<tr>\n<td>锁机制</td>\n<td>行锁</td>\n<td>表锁</td>\n<td>表锁</td>\n</tr>\n<tr>\n<td>B+tree 索引</td>\n<td>支持</td>\n<td>支持</td>\n<td>支持</td>\n</tr>\n<tr>\n<td>Hash 索引</td>\n<td>-</td>\n<td>-</td>\n<td>支持</td>\n</tr>\n<tr>\n<td>全文索引</td>\n<td>支持（5.6 版本之后）</td>\n<td>支持</td>\n<td>-</td>\n</tr>\n<tr>\n<td>空间使用</td>\n<td>高</td>\n<td>低</td>\n<td>N/A</td>\n</tr>\n<tr>\n<td>内存使用</td>\n<td>高</td>\n<td>低</td>\n<td>中等</td>\n</tr>\n<tr>\n<td>批量插入速度</td>\n<td>低</td>\n<td>高</td>\n<td>高</td>\n</tr>\n<tr>\n<td>支持外键</td>\n<td>支持</td>\n<td>-</td>\n<td>-</td>\n</tr>\n</tbody>\n</table>\n<h3 id=\"存储引擎的选择\"><a class=\"anchor\" href=\"#存储引擎的选择\">#</a> 存储引擎的选择</h3>\n<p>在选择存储引擎时，应该根据应用系统的特点选择合适的存储引擎。对于复杂的应用系统，还可以根据实际情况选择多种存储引擎进行组合。</p>\n<ul>\n<li>InnoDB: 如果应用对事物的完整性有比较高的要求，在并发条件下要求数据的一致性，数据操作除了插入和查询之外，还包含很多的更新、删除操作，则 InnoDB 是比较合适的选择</li>\n<li>MyISAM: 如果应用是以读操作和插入操作为主，只有很少的更新和删除操作，并且对事务的完整性、并发性要求不高，那这个存储引擎是非常合适的。</li>\n<li>Memory: 将所有数据保存在内存中，访问速度快，通常用于临时表及缓存。Memory 的缺陷是对表的大小有限制，太大的表无法缓存在内存中，而且无法保障数据的安全性</li>\n</ul>\n<p>电商中的足迹和评论适合使用 MyISAM 引擎，缓存适合使用 Memory 引擎。</p>\n<h2 id=\"性能分析\"><a class=\"anchor\" href=\"#性能分析\">#</a> 性能分析</h2>\n<h3 id=\"查看执行频次\"><a class=\"anchor\" href=\"#查看执行频次\">#</a> 查看执行频次</h3>\n<p>查看当前数据库的 INSERT, UPDATE, DELETE, SELECT 访问频次：<br />\n <code>SHOW GLOBAL STATUS LIKE 'Com_______';</code>  或者  <code>SHOW SESSION STATUS LIKE 'Com_______';</code> <br />\n 例： <code>show global status like 'Com_______'</code></p>\n<h3 id=\"慢查询日志\"><a class=\"anchor\" href=\"#慢查询日志\">#</a> 慢查询日志</h3>\n<p>慢查询日志记录了所有执行时间超过指定参数（long_query_time，单位：秒，默认 10 秒）的所有 SQL 语句的日志。<br />\nMySQL 的慢查询日志默认没有开启，需要在 MySQL 的配置文件（/etc/my.cnf）中配置如下信息：</p>\n<h1 id=\"开启慢查询日志开关\"><a class=\"anchor\" href=\"#开启慢查询日志开关\">#</a> 开启慢查询日志开关</h1>\n<p>slow_query_log=1</p>\n<h1 id=\"设置慢查询日志的时间为2秒sql语句执行时间超过2秒就会视为慢查询记录慢查询日志\"><a class=\"anchor\" href=\"#设置慢查询日志的时间为2秒sql语句执行时间超过2秒就会视为慢查询记录慢查询日志\">#</a> 设置慢查询日志的时间为 2 秒，SQL 语句执行时间超过 2 秒，就会视为慢查询，记录慢查询日志</h1>\n<p>long_query_time=2<br />\n 更改后记得重启 MySQL 服务，日志文件位置：/var/lib/mysql/localhost-slow.log</p>\n<p>查看慢查询日志开关状态：<br />\n <code>show variables like 'slow_query_log';</code></p>\n<h3 id=\"profile\"><a class=\"anchor\" href=\"#profile\">#</a> profile</h3>\n<p>show profile 能在做 SQL 优化时帮我们了解时间都耗费在哪里。通过 have_profiling 参数，能看到当前 MySQL 是否支持 profile 操作：<br />\n <code>SELECT @@have_profiling;</code> <br />\nprofiling 默认关闭，可以通过 set 语句在 session/global 级别开启 profiling：<br />\n <code>SET profiling = 1;</code> <br />\n 查看所有语句的耗时：<br />\n <code>show profiles;</code> <br />\n 查看指定 query_id 的 SQL 语句各个阶段的耗时：<br />\n <code>show profile for query query_id;</code> <br />\n 查看指定 query_id 的 SQL 语句 CPU 的使用情况<br />\n <code>show profile cpu for query query_id;</code></p>\n<h3 id=\"explain\"><a class=\"anchor\" href=\"#explain\">#</a> explain</h3>\n<p>EXPLAIN 或者 DESC 命令获取 MySQL 如何执行 SELECT 语句的信息，包括在 SELECT 语句执行过程中表如何连接和连接的顺序。<br />\n语法：</p>\n<h1 id=\"直接在select语句之前加上关键字-explain-desc\"><a class=\"anchor\" href=\"#直接在select语句之前加上关键字-explain-desc\">#</a> 直接在 select 语句之前加上关键字 explain /desc</h1>\n<p>EXPLAIN SELECT 字段列表 FROM 表名 HWERE 条件；</p>\n<p>EXPLAIN 各字段含义：</p>\n<ul>\n<li>id：select 查询的序列号，表示查询中执行 select 子句或者操作表的顺序（id 相同，执行顺序从上到下；id 不同，值越大越先执行）</li>\n<li>select_type：表示 SELECT 的类型，常见取值有 SIMPLE（简单表，即不适用表连接或者子查询）、PRIMARY（主查询，即外层的查询）、UNION（UNION 中的第二个或者后面的查询语句）、SUBQUERY（SELECT/WHERE 之后包含了子查询）等</li>\n<li>type：表示连接类型，性能由好到差的连接类型为 NULL、system、const、eq_ref、ref、range、index、all</li>\n<li>possible_key：可能应用在这张表上的索引，一个或多个</li>\n<li>Key：实际使用的索引，如果为 NULL，则没有使用索引</li>\n<li>Key_len：表示索引中使用的字节数，该值为索引字段最大可能长度，并非实际使用长度，在不损失精确性的前提下，长度越短越好</li>\n<li>rows：MySQL 认为必须要执行的行数，在 InnoDB 引擎的表中，是一个估计值，可能并不总是准确的</li>\n<li>filtered：表示返回结果的行数占需读取行数的百分比，filtered 的值越大越好</li>\n</ul>\n<h2 id=\"索引\"><a class=\"anchor\" href=\"#索引\">#</a> 索引</h2>\n<p>索引是帮助 MySQL <strong>高效获取数据</strong>的<strong>数据结构（有序）</strong>。在数据之外，数据库系统还维护着满足特定查找算法的数据结构，这些数据结构以某种方式引用（指向）数据，这样就可以在这些数据结构上实现高级查询算法，这种数据结构就是索引。</p>\n<p>优缺点：</p>\n<p>优点：</p>\n<ul>\n<li>提高数据检索效率，降低数据库的 IO 成本</li>\n<li>通过索引列对数据进行排序，降低数据排序的成本，降低 CPU 的消耗</li>\n</ul>\n<p>缺点：</p>\n<ul>\n<li>索引列也是要占用空间的</li>\n<li>索引大大提高了查询效率，但降低了更新的速度，比如 INSERT、UPDATE、DELETE</li>\n</ul>\n<h3 id=\"索引结构\"><a class=\"anchor\" href=\"#索引结构\">#</a> 索引结构</h3>\n<table>\n<thead>\n<tr>\n<th>索引结构</th>\n<th>描述</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>B+Tree</td>\n<td>最常见的索引类型，大部分引擎都支持 B + 树索引</td>\n</tr>\n<tr>\n<td>Hash</td>\n<td>底层数据结构是用哈希表实现，只有精确匹配索引列的查询才有效，不支持范围查询</td>\n</tr>\n<tr>\n<td>R-Tree (空间索引)</td>\n<td>空间索引是 MyISAM 引擎的一个特殊索引类型，主要用于地理空间数据类型，通常使用较少</td>\n</tr>\n<tr>\n<td>Full-Text (全文索引)</td>\n<td>是一种通过建立倒排索引，快速匹配文档的方式，类似于 Lucene, Solr, ES</td>\n</tr>\n</tbody>\n<tbody>\n<tr>\n<td>索引</td>\n<td>InnoDB</td>\n<td>MyISAM</td>\n<td>Memory</td>\n</tr>\n<tr>\n<td>---</td>\n<td>---</td>\n<td>---</td>\n<td>---</td>\n</tr>\n<tr>\n<td>B+Tree 索引</td>\n<td>支持</td>\n<td>支持</td>\n<td>支持</td>\n</tr>\n<tr>\n<td>Hash 索引</td>\n<td>不支持</td>\n<td>不支持</td>\n<td>支持</td>\n</tr>\n<tr>\n<td>R-Tree 索引</td>\n<td>不支持</td>\n<td>支持</td>\n<td>不支持</td>\n</tr>\n<tr>\n<td>Full-text</td>\n<td>5.6 版本后支持</td>\n<td>支持</td>\n<td>不支持</td>\n</tr>\n</tbody>\n</table>\n<h4 id=\"b-tree\"><a class=\"anchor\" href=\"#b-tree\">#</a> B-Tree</h4>\n<p><img data-src=\"https://dhc.pythonanywhere.com/media/editor/%E4%BA%8C%E5%8F%89%E6%A0%91_20220316153214227108.png#id=Pg5Ct&amp;originHeight=617&amp;originWidth=1216&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=true&amp;status=done&amp;style=none&amp;title=%E4%BA%8C%E5%8F%89%E6%A0%91\" alt=\"二叉树\" title=\"二叉树\" /></p>\n<p>二叉树的缺点可以用红黑树来解决：<br />\n<img data-src=\"https://dhc.pythonanywhere.com/media/editor/%E7%BA%A2%E9%BB%91%E6%A0%91_20220316163142686602.png#id=BOjKg&amp;originHeight=402&amp;originWidth=487&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=true&amp;status=done&amp;style=none&amp;title=%E7%BA%A2%E9%BB%91%E6%A0%91\" alt=\"红黑树\" title=\"红黑树\" /><br />\n红黑树也存在大数据量情况下，层级较深，检索速度慢的问题。</p>\n<p>为了解决上述问题，可以使用 B-Tree 结构。<br />\nB-Tree (多路平衡查找树) 以一棵最大度数（max-degree，指一个节点的子节点个数）为 5（5 阶）的 b-tree 为例（每个节点最多存储 4 个 key，5 个指针）</p>\n<p><img data-src=\"https://dhc.pythonanywhere.com/media/editor/B-Tree%E7%BB%93%E6%9E%84_20220316163813441163.png#id=F20Gm&amp;originHeight=457&amp;originWidth=1561&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=true&amp;status=done&amp;style=none&amp;title=B-Tree%E7%BB%93%E6%9E%84\" alt=\"B-Tree结构\" title=\"B-Tree结构\" /></p>\n<blockquote>\n<p>B-Tree 的数据插入过程动画参照：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMUtyNHkxaTdydT9wPTY4\">https://www.bilibili.com/video/BV1Kr4y1i7ru?p=68</span><br />\n 演示地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY3MudXNmY2EuZWR1L35nYWxsZXMvdmlzdWFsaXphdGlvbi9CVHJlZS5odG1s\">https://www.cs.usfca.edu/~galles/visualization/BTree.html</span></p>\n</blockquote>\n<h4 id=\"btree\"><a class=\"anchor\" href=\"#btree\">#</a> B+Tree</h4>\n<p>结构图：</p>\n<p><img data-src=\"https://dhc.pythonanywhere.com/media/editor/B+Tree%E7%BB%93%E6%9E%84%E5%9B%BE_20220316170700591277.png#id=iWrCh&amp;originHeight=444&amp;originWidth=1424&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=true&amp;status=done&amp;style=none&amp;title=B%2BTree%E7%BB%93%E6%9E%84%E5%9B%BE\" alt=\"B+Tree结构图\" title=\"B+Tree结构图\" /></p>\n<blockquote>\n<p>演示地址：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuY3MudXNmY2EuZWR1L35nYWxsZXMvdmlzdWFsaXphdGlvbi9CUGx1c1RyZWUuaHRtbA==\">https://www.cs.usfca.edu/~galles/visualization/BPlusTree.html</span></p>\n</blockquote>\n<p>与 B-Tree 的区别：</p>\n<ul>\n<li>所有的数据都会出现在叶子节点</li>\n<li>叶子节点形成一个单向链表</li>\n</ul>\n<p>MySQL 索引数据结构对经典的 B+Tree 进行了优化。在原 B+Tree 的基础上，增加一个指向相邻叶子节点的链表指针，就形成了带有顺序指针的 B+Tree，提高区间访问的性能。</p>\n<p><img data-src=\"https://dhc.pythonanywhere.com/media/editor/%E7%BB%93%E6%9E%84%E5%9B%BE_20220316171730865611.png#id=m8ZTP&amp;originHeight=476&amp;originWidth=1513&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=true&amp;status=done&amp;style=none&amp;title=MySQL%20B%2BTree%20%E7%BB%93%E6%9E%84%E5%9B%BE\" alt=\"MySQL B+Tree 结构图\" title=\"MySQL B+Tree 结构图\" /></p>\n<h4 id=\"hash\"><a class=\"anchor\" href=\"#hash\">#</a> Hash</h4>\n<p>哈希索引就是采用一定的 hash 算法，将键值换算成新的 hash 值，映射到对应的槽位上，然后存储在 hash 表中。<br />\n如果两个（或多个）键值，映射到一个相同的槽位上，他们就产生了 hash 冲突（也称为 hash 碰撞），可以通过链表来解决。</p>\n<p><img data-src=\"https://dhc.pythonanywhere.com/media/editor/Hash%E7%B4%A2%E5%BC%95%E5%8E%9F%E7%90%86%E5%9B%BE_20220317143226150679.png#id=C94Dh&amp;originHeight=538&amp;originWidth=1372&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=true&amp;status=done&amp;style=none&amp;title=Hash%E7%B4%A2%E5%BC%95%E5%8E%9F%E7%90%86%E5%9B%BE\" alt=\"Hash索引原理图\" title=\"Hash索引原理图\" /></p>\n<p>特点：</p>\n<ul>\n<li>Hash 索引只能用于对等比较（=、in），不支持范围查询（betwwn、&gt;、&lt;、...）</li>\n<li>无法利用索引完成排序操作</li>\n<li>查询效率高，通常只需要一次检索就可以了，效率通常要高于 B+Tree 索引</li>\n</ul>\n<p>存储引擎支持：</p>\n<ul>\n<li>Memory</li>\n<li>InnoDB: 具有自适应 hash 功能，hash 索引是存储引擎根据 B+Tree 索引在指定条件下自动构建的</li>\n</ul>\n<h4 id=\"面试题\"><a class=\"anchor\" href=\"#面试题\">#</a> 面试题</h4>\n<ol>\n<li>为什么 InnoDB 存储引擎选择使用 B+Tree 索引结构？</li>\n</ol>\n<ul>\n<li>相对于二叉树，层级更少，搜索效率高</li>\n<li>对于 B-Tree，无论是叶子节点还是非叶子节点，都会保存数据，这样导致一页中存储的键值减少，指针也跟着减少，要同样保存大量数据，只能增加树的高度，导致性能降低</li>\n<li>相对于 Hash 索引，B+Tree 支持范围匹配及排序操作</li>\n</ul>\n<h3 id=\"索引分类\"><a class=\"anchor\" href=\"#索引分类\">#</a> 索引分类</h3>\n<table>\n<thead>\n<tr>\n<th>分类</th>\n<th>含义</th>\n<th>特点</th>\n<th>关键字</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>主键索引</td>\n<td>针对于表中主键创建的索引</td>\n<td>默认自动创建，只能有一个</td>\n<td>PRIMARY</td>\n</tr>\n<tr>\n<td>唯一索引</td>\n<td>避免同一个表中某数据列中的值重复</td>\n<td>可以有多个</td>\n<td>UNIQUE</td>\n</tr>\n<tr>\n<td>常规索引</td>\n<td>快速定位特定数据</td>\n<td>可以有多个</td>\n<td></td>\n</tr>\n<tr>\n<td>全文索引</td>\n<td>全文索引查找的是文本中的关键词，而不是比较索引中的值</td>\n<td>可以有多个</td>\n<td>FULLTEXT</td>\n</tr>\n</tbody>\n</table>\n<p>在 InnoDB 存储引擎中，根据索引的存储形式，又可以分为以下两种：</p>\n<table>\n<thead>\n<tr>\n<th>分类</th>\n<th>含义</th>\n<th>特点</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>聚集索引 (Clustered Index)</td>\n<td>将数据存储与索引放一块，索引结构的叶子节点保存了行数据</td>\n<td>必须有，而且只有一个</td>\n</tr>\n<tr>\n<td>二级索引 (Secondary Index)</td>\n<td>将数据与索引分开存储，索引结构的叶子节点关联的是对应的主键</td>\n<td>可以存在多个</td>\n</tr>\n</tbody>\n</table>\n<p>演示图：</p>\n<p><img data-src=\"https://dhc.pythonanywhere.com/media/editor/%E5%8E%9F%E7%90%86%E5%9B%BE_20220318194454880073.png#id=EF31i&amp;originHeight=765&amp;originWidth=1517&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=true&amp;status=done&amp;style=none&amp;title=%E5%A4%A7%E8%87%B4%E5%8E%9F%E7%90%86\" alt=\"大致原理\" title=\"大致原理\" /><br />\n<img data-src=\"https://dhc.pythonanywhere.com/media/editor/%E6%BC%94%E7%A4%BA%E5%9B%BE_20220319215403721066.png#id=IxbKN&amp;originHeight=778&amp;originWidth=1510&amp;originalType=binary&amp;ratio=1&amp;rotation=0&amp;showTitle=true&amp;status=done&amp;style=none&amp;title=%E6%BC%94%E7%A4%BA%E5%9B%BE\" alt=\"演示图\" title=\"演示图\" /></p>\n<p>聚集索引选取规则：</p>\n<ul>\n<li>如果存在主键，主键索引就是聚集索引</li>\n<li>如果不存在主键，将使用第一个唯一 (UNIQUE) 索引作为聚集索引</li>\n<li>如果表没有主键或没有合适的唯一索引，则 InnoDB 会自动生成一个 rowid 作为隐藏的聚集索引</li>\n</ul>\n<h4 id=\"思考题\"><a class=\"anchor\" href=\"#思考题\">#</a> 思考题</h4>\n<ol>\n<li>以下 SQL 语句，哪个执行效率高？为什么？</li>\n</ol>\n<pre><code>select * from user where id = 10;\nselect * from user where name = 'Arm';\n-- 备注：id为主键，name字段创建的有索引\n</code></pre>\n<p>答：第一条语句，因为第二条需要回表查询，相当于两个步骤。</p>\n<ol start=\"2\">\n<li>InnoDB 主键索引的 B+Tree 高度为多少？</li>\n</ol>\n<p>答：假设一行数据大小为 1k，一页中可以存储 16 行这样的数据。InnoDB 的指针占用 6 个字节的空间，主键假设为 bigint，占用字节数为 8.<br />\n 可得公式： <code>n * 8 + (n + 1) * 6 = 16 * 1024</code> ，其中 8 表示 bigint 占用的字节数，n 表示当前节点存储的 key 的数量，(n + 1) 表示指针数量（比 key 多一个）。算出 n 约为 1170。</p>\n<p>如果树的高度为 2，那么他能存储的数据量大概为： <code>1171 * 16 = 18736</code> ；<br />\n如果树的高度为 3，那么他能存储的数据量大概为： <code>1171 * 1171 * 16 = 21939856</code> 。</p>\n<p>另外，如果有成千上万的数据，那么就要考虑分表，涉及运维篇知识。</p>\n<h3 id=\"语法\"><a class=\"anchor\" href=\"#语法\">#</a> 语法</h3>\n<p>创建索引：<br />\n <code>CREATE [ UNIQUE | FULLTEXT ] INDEX index_name ON table_name (index_col_name, ...);</code> <br />\n 如果不加 CREATE 后面不加索引类型参数，则创建的是常规索引</p>\n<p>查看索引：<br />\n <code>SHOW INDEX FROM table_name;</code></p>\n<p>删除索引：<br />\n <code>DROP INDEX index_name ON table_name;</code></p>\n<p>案例：</p>\n<pre><code>-- name字段为姓名字段，该字段的值可能会重复，为该字段创建索引\ncreate index idx_user_name on tb_user(name);\n-- phone手机号字段的值非空，且唯一，为该字段创建唯一索引\ncreate unique index idx_user_phone on tb_user (phone);\n-- 为profession, age, status创建联合索引\ncreate index idx_user_pro_age_stat on tb_user(profession, age, status);\n-- 为email建立合适的索引来提升查询效率\ncreate index idx_user_email on tb_user(email);\n\n-- 删除索引\ndrop index idx_user_email on tb_user;\n</code></pre>\n<h3 id=\"使用规则\"><a class=\"anchor\" href=\"#使用规则\">#</a> 使用规则</h3>\n<h4 id=\"最左前缀法则\"><a class=\"anchor\" href=\"#最左前缀法则\">#</a> 最左前缀法则</h4>\n<p>如果索引关联了多列（联合索引），要遵守最左前缀法则，最左前缀法则指的是查询从索引的最左列开始，并且不跳过索引中的列。<br />\n如果跳跃某一列，索引将部分失效（后面的字段索引失效）。</p>\n<p>联合索引中，出现范围查询（&lt;,&gt;），范围查询右侧的列索引失效。可以用 &gt;= 或者 &lt;= 来规避索引失效问题。</p>\n<h4 id=\"索引失效情况\"><a class=\"anchor\" href=\"#索引失效情况\">#</a> 索引失效情况</h4>\n<ol>\n<li>在索引列上进行运算操作，索引将失效。如： <code>explain select * from tb_user where substring(phone, 10, 2) = '15';</code></li>\n<li>字符串类型字段使用时，不加引号，索引将失效。如： <code>explain select * from tb_user where phone = 17799990015;</code> ，此处 phone 的值没有加引号</li>\n<li>模糊查询中，如果仅仅是尾部模糊匹配，索引不会是失效；如果是头部模糊匹配，索引失效。如： <code>explain select * from tb_user where profession like '%工程';</code> ，前后都有 % 也会失效。</li>\n<li>用 or 分割开的条件，如果 or 其中一个条件的列没有索引，那么涉及的索引都不会被用到。</li>\n<li>如果 MySQL 评估使用索引比全表更慢，则不使用索引。</li>\n</ol>\n<h4 id=\"sql-提示\"><a class=\"anchor\" href=\"#sql-提示\">#</a> SQL 提示</h4>\n<p>是优化数据库的一个重要手段，简单来说，就是在 SQL 语句中加入一些人为的提示来达到优化操作的目的。</p>\n<p>例如，使用索引：<br />\n <code>explain select * from tb_user use index(idx_user_pro) where profession=&quot;软件工程&quot;;</code> <br />\n 不使用哪个索引：<br />\n <code>explain select * from tb_user ignore index(idx_user_pro) where profession=&quot;软件工程&quot;;</code> <br />\n 必须使用哪个索引：<br />\n <code>explain select * from tb_user force index(idx_user_pro) where profession=&quot;软件工程&quot;;</code></p>\n<p>use 是建议，实际使用哪个索引 MySQL 还会自己权衡运行速度去更改，force 就是无论如何都强制使用该索引。</p>\n<h4 id=\"覆盖索引回表查询\"><a class=\"anchor\" href=\"#覆盖索引回表查询\">#</a> 覆盖索引 &amp; 回表查询</h4>\n<p>尽量使用覆盖索引（查询使用了索引，并且需要返回的列，在该索引中已经全部能找到），减少 select *。</p>\n<p>explain 中 extra 字段含义：<br />\n <code>using index condition</code> ：查找使用了索引，但是需要回表查询数据<br />\n <code>using where; using index;</code> ：查找使用了索引，但是需要的数据都在索引列中能找到，所以不需要回表查询</p>\n<p>如果在聚集索引中直接能找到对应的行，则直接返回行数据，只需要一次查询，哪怕是 select *；如果在辅助索引中找聚集索引，如 <code>select id, name from xxx where name='xxx';</code> ，也只需要通过辅助索引 (name) 查找到对应的 id，返回 name 和 name 索引对应的 id 即可，只需要一次查询；如果是通过辅助索引查找其他字段，则需要回表查询，如 <code>select id, name, gender from xxx where name='xxx';</code></p>\n<p>所以尽量不要用 <code>select *</code> ，容易出现回表查询，降低效率，除非有联合索引包含了所有字段</p>\n<p>面试题：一张表，有四个字段（id, username, password, status），由于数据量大，需要对以下 SQL 语句进行优化，该如何进行才是最优方案：<br />\n <code>select id, username, password from tb_user where username='itcast';</code></p>\n<p>解：给 username 和 password 字段建立联合索引，则不需要回表查询，直接覆盖索引</p>\n<h4 id=\"前缀索引\"><a class=\"anchor\" href=\"#前缀索引\">#</a> 前缀索引</h4>\n<p>当字段类型为字符串（varchar, text 等）时，有时候需要索引很长的字符串，这会让索引变得很大，查询时，浪费大量的磁盘 IO，影响查询效率，此时可以只降字符串的一部分前缀，建立索引，这样可以大大节约索引空间，从而提高索引效率。</p>\n<p>语法： <code>create index idx_xxxx on table_name(columnn(n));</code> <br />\n 前缀长度：可以根据索引的选择性来决定，而选择性是指不重复的索引值（基数）和数据表的记录总数的比值，索引选择性越高则查询效率越高，唯一索引的选择性是 1，这是最好的索引选择性，性能也是最好的。<br />\n求选择性公式：</p>\n<pre><code>select count(distinct email) / count(*) from tb_user;\nselect count(distinct substring(email, 1, 5)) / count(*) from tb_user;\n</code></pre>\n<p>show index 里面的 sub_part 可以看到接取的长度</p>\n<h4 id=\"单列索引联合索引\"><a class=\"anchor\" href=\"#单列索引联合索引\">#</a> 单列索引 &amp; 联合索引</h4>\n<p>单列索引：即一个索引只包含单个列<br />\n联合索引：即一个索引包含了多个列<br />\n在业务场景中，如果存在多个查询条件，考虑针对于查询字段建立索引时，建议建立联合索引，而非单列索引。</p>\n<p>单列索引情况：<br />\n <code>explain select id, phone, name from tb_user where phone = '17799990010' and name = '韩信';</code> <br />\n 这句只会用到 phone 索引字段</p>\n<h5 id=\"注意事项-9\"><a class=\"anchor\" href=\"#注意事项-9\">#</a> 注意事项</h5>\n<ul>\n<li>多条件联合查询时，MySQL 优化器会评估哪个字段的索引效率更高，会选择该索引完成本次查询</li>\n</ul>\n<h3 id=\"设计原则\"><a class=\"anchor\" href=\"#设计原则\">#</a> 设计原则</h3>\n<ol>\n<li>针对于数据量较大，且查询比较频繁的表建立索引</li>\n<li>针对于常作为查询条件（where）、排序（order by）、分组（group by）操作的字段建立索引</li>\n<li>尽量选择区分度高的列作为索引，尽量建立唯一索引，区分度越高，使用索引的效率越高</li>\n<li>如果是字符串类型的字段，字段长度较长，可以针对于字段的特点，建立前缀索引</li>\n<li>尽量使用联合索引，减少单列索引，查询时，联合索引很多时候可以覆盖索引，节省存储空间，避免回表，提高查询效率</li>\n<li>要控制索引的数量，索引并不是多多益善，索引越多，维护索引结构的代价就越大，会影响增删改的效率</li>\n<li>如果索引列不能存储 NULL 值，请在创建表时使用 NOT NULL 约束它。当优化器知道每列是否包含 NULL 值时，它可以更好地确定哪个索引最有效地用于查询</li>\n</ol>\n<h2 id=\"sql-优化\"><a class=\"anchor\" href=\"#sql-优化\">#</a> SQL 优化</h2>\n<h3 id=\"插入数据\"><a class=\"anchor\" href=\"#插入数据\">#</a> 插入数据</h3>\n<p>普通插入：</p>\n<ol>\n<li>采用批量插入（一次插入的数据不建议超过 1000 条）</li>\n<li>手动提交事务</li>\n<li>主键顺序插入</li>\n</ol>\n<p>大批量插入：<br />\n如果一次性需要插入大批量数据，使用 insert 语句插入性能较低，此时可以使用 MySQL 数据库提供的 load 指令插入。</p>\n<pre><code># 客户端连接服务端时，加上参数 --local-infile（这一行在bash/cmd界面输入）\nmysql --local-infile -u root -p\n# 设置全局参数local_infile为1，开启从本地加载文件导入数据的开关\nset global local_infile = 1;\nselect @@local_infile;\n# 执行load指令将准备好的数据，加载到表结构中\nload data local infile '/root/sql1.log' into table 'tb_user' fields terminated by ',' lines terminated by '\\n';\n</code></pre>\n<h3 id=\"主键优化\"><a class=\"anchor\" href=\"#主键优化\">#</a> 主键优化</h3>\n<p>数据组织方式：在 InnoDB 存储引擎中，表数据都是根据主键顺序组织存放的，这种存储方式的表称为索引组织表（Index organized table, IOT）</p>\n<p>页分裂：页可以为空，也可以填充一般，也可以填充 100%，每个页包含了 2-N 行数据（如果一行数据过大，会行溢出），根据主键排列。<br />\n页合并：当删除一行记录时，实际上记录并没有被物理删除，只是记录被标记（flaged）为删除并且它的空间变得允许被其他记录声明使用。当页中删除的记录到达 MERGE_THRESHOLD（默认为页的 50%），InnoDB 会开始寻找最靠近的页（前后）看看是否可以将这两个页合并以优化空间使用。</p>\n<p>MERGE_THRESHOLD：合并页的阈值，可以自己设置，在创建表或创建索引时指定</p>\n<blockquote>\n<p>文字说明不够清晰明了，具体可以看视频里的 PPT 演示过程：<span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cuYmlsaWJpbGkuY29tL3ZpZGVvL0JWMUtyNHkxaTdydT9wPTkw\">https://www.bilibili.com/video/BV1Kr4y1i7ru?p=90</span></p>\n</blockquote>\n<p>主键设计原则：</p>\n<ul>\n<li>满足业务需求的情况下，尽量降低主键的长度</li>\n<li>插入数据时，尽量选择顺序插入，选择使用 AUTO_INCREMENT 自增主键</li>\n<li>尽量不要使用 UUID 做主键或者是其他的自然主键，如身份证号</li>\n<li>业务操作时，避免对主键的修改</li>\n</ul>\n<h3 id=\"order-by优化\"><a class=\"anchor\" href=\"#order-by优化\">#</a> order by 优化</h3>\n<ol>\n<li>Using filesort：通过表的索引或全表扫描，读取满足条件的数据行，然后在排序缓冲区 sort buffer 中完成排序操作，所有不是通过索引直接返回排序结果的排序都叫 FileSort 排序</li>\n<li>Using index：通过有序索引顺序扫描直接返回有序数据，这种情况即为 using index，不需要额外排序，操作效率高</li>\n</ol>\n<p>如果 order by 字段全部使用升序排序或者降序排序，则都会走索引，但是如果一个字段升序排序，另一个字段降序排序，则不会走索引，explain 的 extra 信息显示的是 <code>Using index, Using filesort</code> ，如果要优化掉 Using filesort，则需要另外再创建一个索引，如： <code>create index idx_user_age_phone_ad on tb_user(age asc, phone desc);</code> ，此时使用 <code>select id, age, phone from tb_user order by age asc, phone desc;</code>  会全部走索引</p>\n<p>总结：</p>\n<ul>\n<li>根据排序字段建立合适的索引，多字段排序时，也遵循最左前缀法则</li>\n<li>尽量使用覆盖索引</li>\n<li>多字段排序，一个升序一个降序，此时需要注意联合索引在创建时的规则（ASC/DESC）</li>\n<li>如果不可避免出现 filesort，大数据量排序时，可以适当增大排序缓冲区大小 sort_buffer_size（默认 256k）</li>\n</ul>\n<h3 id=\"group-by优化\"><a class=\"anchor\" href=\"#group-by优化\">#</a> group by 优化</h3>\n<ul>\n<li>在分组操作时，可以通过索引来提高效率</li>\n<li>分组操作时，索引的使用也是满足最左前缀法则的</li>\n</ul>\n<p>如索引为 <code>idx_user_pro_age_stat</code> ，则句式可以是 <code>select ... where profession order by age</code> ，这样也符合最左前缀法则</p>\n<h3 id=\"limit优化\"><a class=\"anchor\" href=\"#limit优化\">#</a> limit 优化</h3>\n<p>常见的问题如 <code>limit 2000000, 10</code> ，此时需要 MySQL 排序前 2000000 条记录，但仅仅返回 2000000 - 2000010 的记录，其他记录丢弃，查询排序的代价非常大。<br />\n优化方案：一般分页查询时，通过创建覆盖索引能够比较好地提高性能，可以通过覆盖索引加子查询形式进行优化</p>\n<p>例如：</p>\n<pre><code>-- 此语句耗时很长\nselect * from tb_sku limit 9000000, 10;\n-- 通过覆盖索引加快速度，直接通过主键索引进行排序及查询\nselect id from tb_sku order by id limit 9000000, 10;\n-- 下面的语句是错误的，因为 MySQL 不支持 in 里面使用 limit\n-- select * from tb_sku where id in (select id from tb_sku order by id limit 9000000, 10);\n-- 通过连表查询即可实现第一句的效果，并且能达到第二句的速度\nselect * from tb_sku as s, (select id from tb_sku order by id limit 9000000, 10) as a where s.id = a.id;\n</code></pre>\n<h3 id=\"count优化\"><a class=\"anchor\" href=\"#count优化\">#</a> count 优化</h3>\n<p>MyISAM 引擎把一个表的总行数存在了磁盘上，因此执行 count (<em>) 的时候会直接返回这个数，效率很高（前提是不适用 where）；<br />\nInnoDB 在执行 count (</em>) 时，需要把数据一行一行地从引擎里面读出来，然后累计计数。<br />\n优化方案：自己计数，如创建 key-value 表存储在内存或硬盘，或者是用 redis</p>\n<p>count 的几种用法：</p>\n<ul>\n<li>如果 count 函数的参数（count 里面写的那个字段）不是 NULL（字段值不为 NULL），累计值就加一，最后返回累计值</li>\n<li>用法：count (*)、count (主键)、count (字段)、count (1)</li>\n<li>count (主键) 跟 count (<em>) 一样，因为主键不能为空；count (字段) 只计算字段值不为 NULL 的行；count (1) 引擎会为每行添加一个 1，然后就 count 这个 1，返回结果也跟 count (</em>) 一样；count (null) 返回 0</li>\n</ul>\n<p>各种用法的性能：</p>\n<ul>\n<li>count (主键)：InnoDB 引擎会遍历整张表，把每行的主键 id 值都取出来，返回给服务层，服务层拿到主键后，直接按行进行累加（主键不可能为空）</li>\n<li>count (字段)：没有 not null 约束的话，InnoDB 引擎会遍历整张表把每一行的字段值都取出来，返回给服务层，服务层判断是否为 null，不为 null，计数累加；有 not null 约束的话，InnoDB 引擎会遍历整张表把每一行的字段值都取出来，返回给服务层，直接按行进行累加</li>\n<li>count (1)：InnoDB 引擎遍历整张表，但不取值。服务层对于返回的每一层，放一个数字 1 进去，直接按行进行累加</li>\n<li>count (*)：InnoDB 引擎并不会把全部字段取出来，而是专门做了优化，不取值，服务层直接按行进行累加</li>\n</ul>\n<p>按效率排序：count (字段) &lt; count (主键) &lt; count (1) &lt; count (<em>)，所以尽量使用 count (</em>)</p>\n<h3 id=\"update优化避免行锁升级为表锁\"><a class=\"anchor\" href=\"#update优化避免行锁升级为表锁\">#</a> update 优化（避免行锁升级为表锁）</h3>\n<p>InnoDB 的行锁是针对索引加的锁，不是针对记录加的锁，并且该索引不能失效，否则会从行锁升级为表锁。</p>\n<p>如以下两条语句：<br />\n <code>update student set no = '123' where id = 1;</code> ，这句由于 id 有主键索引，所以只会锁这一行；<br />\n <code>update student set no = '123' where name = 'test';</code> ，这句由于 name 没有索引，所以会把整张表都锁住进行数据更新，解决方法是给 name 字段添加索引</p>\n<h1 id=\"数据类型\"><a class=\"anchor\" href=\"#数据类型\">#</a> 数据类型</h1>\n<h2 id=\"整型\"><a class=\"anchor\" href=\"#整型\">#</a> 整型</h2>\n<table>\n<thead>\n<tr>\n<th>类型名称</th>\n<th>取值范围</th>\n<th>大小</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>TINYINT</td>\n<td>-128〜127</td>\n<td>1 个字节</td>\n</tr>\n<tr>\n<td>SMALLINT</td>\n<td>-32768〜32767</td>\n<td>2 个宇节</td>\n</tr>\n<tr>\n<td>MEDIUMINT</td>\n<td>-8388608〜8388607</td>\n<td>3 个字节</td>\n</tr>\n<tr>\n<td>INT (INTEGHR)</td>\n<td>-2147483648〜2147483647</td>\n<td>4 个字节</td>\n</tr>\n<tr>\n<td>BIGINT</td>\n<td>-9223372036854775808〜9223372036854775807</td>\n<td>8 个字节</td>\n</tr>\n</tbody>\n</table>\n<p>无符号在数据类型后加 unsigned 关键字。</p>\n<h2 id=\"浮点型\"><a class=\"anchor\" href=\"#浮点型\">#</a> 浮点型</h2>\n<table>\n<thead>\n<tr>\n<th>类型名称</th>\n<th>说明</th>\n<th>存储需求</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>FLOAT</td>\n<td>单精度浮点数</td>\n<td>4 个字节</td>\n</tr>\n<tr>\n<td>DOUBLE</td>\n<td>双精度浮点数</td>\n<td>8 个字节</td>\n</tr>\n<tr>\n<td>DECIMAL (M, D)，DEC</td>\n<td>压缩的 “严格” 定点数</td>\n<td>M+2 个字节</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"日期和时间\"><a class=\"anchor\" href=\"#日期和时间\">#</a> 日期和时间</h2>\n<table>\n<thead>\n<tr>\n<th>类型名称</th>\n<th>日期格式</th>\n<th>日期范围</th>\n<th>存储需求</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>YEAR</td>\n<td>YYYY</td>\n<td>1901 ~ 2155</td>\n<td>1 个字节</td>\n</tr>\n<tr>\n<td>TIME</td>\n<td>HH:MM:SS</td>\n<td>-838:59:59 ~ 838:59:59</td>\n<td>3 个字节</td>\n</tr>\n<tr>\n<td>DATE</td>\n<td>YYYY-MM-DD</td>\n<td>1000-01-01 ~ 9999-12-3</td>\n<td>3 个字节</td>\n</tr>\n<tr>\n<td>DATETIME</td>\n<td>YYYY-MM-DD HH:MM:SS</td>\n<td>1000-01-01 00:00:00 ~ 9999-12-31 23:59:59</td>\n<td>8 个字节</td>\n</tr>\n<tr>\n<td>TIMESTAMP</td>\n<td>YYYY-MM-DD HH:MM:SS</td>\n<td>1980-01-01 00:00:01 UTC ~ 2040-01-19 03:14:07 UTC</td>\n<td>4 个字节</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"字符串\"><a class=\"anchor\" href=\"#字符串\">#</a> 字符串</h2>\n<table>\n<thead>\n<tr>\n<th>类型名称</th>\n<th>说明</th>\n<th>存储需求</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>CHAR(M)</td>\n<td>固定长度非二进制字符串</td>\n<td>M 字节，1&lt;=M&lt;=255</td>\n</tr>\n<tr>\n<td>VARCHAR(M)</td>\n<td>变长非二进制字符串</td>\n<td>L+1 字节，在此，L&lt; = M 和 1&lt;=M&lt;=255</td>\n</tr>\n<tr>\n<td>TINYTEXT</td>\n<td>非常小的非二进制字符串</td>\n<td>L+1 字节，在此，L&lt;2^8</td>\n</tr>\n<tr>\n<td>TEXT</td>\n<td>小的非二进制字符串</td>\n<td>L+2 字节，在此，L&lt;2^16</td>\n</tr>\n<tr>\n<td>MEDIUMTEXT</td>\n<td>中等大小的非二进制字符串</td>\n<td>L+3 字节，在此，L&lt;2^24</td>\n</tr>\n<tr>\n<td>LONGTEXT</td>\n<td>大的非二进制字符串</td>\n<td>L+4 字节，在此，L&lt;2^32</td>\n</tr>\n<tr>\n<td>ENUM</td>\n<td>枚举类型，只能有一个枚举字符串值</td>\n<td>1 或 2 个字节，取决于枚举值的数目 (最大值为 65535)</td>\n</tr>\n<tr>\n<td>SET</td>\n<td>一个设置，字符串对象可以有零个或 多个 SET 成员</td>\n<td>1、2、3、4 或 8 个字节，取决于集合 成员的数量（最多 64 个成员）</td>\n</tr>\n</tbody>\n</table>\n<h2 id=\"二进制类型\"><a class=\"anchor\" href=\"#二进制类型\">#</a> 二进制类型</h2>\n<table>\n<thead>\n<tr>\n<th>类型名称</th>\n<th>说明</th>\n<th>存储需求</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>BIT(M)</td>\n<td>位字段类型</td>\n<td>大约 (M+7)/8 字节</td>\n</tr>\n<tr>\n<td>BINARY(M)</td>\n<td>固定长度二进制字符串</td>\n<td>M 字节</td>\n</tr>\n<tr>\n<td>VARBINARY (M)</td>\n<td>可变长度二进制字符串</td>\n<td>M+1 字节</td>\n</tr>\n<tr>\n<td>TINYBLOB (M)</td>\n<td>非常小的 BLOB</td>\n<td>L+1 字节，在此，L&lt;2^8</td>\n</tr>\n<tr>\n<td>BLOB (M)</td>\n<td>小 BLOB</td>\n<td>L+2 字节，在此，L&lt;2^16</td>\n</tr>\n<tr>\n<td>MEDIUMBLOB (M)</td>\n<td>中等大小的 BLOB</td>\n<td>L+3 字节，在此，L&lt;2^24</td>\n</tr>\n<tr>\n<td>LONGBLOB (M)</td>\n<td>非常大的 BLOB</td>\n<td>L+4 字节，在此，L&lt;2^32</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"权限一览表\"><a class=\"anchor\" href=\"#权限一览表\">#</a> 权限一览表</h1>\n<blockquote>\n<p>具体权限的作用详见<span class=\"exturl\" data-url=\"aHR0cHM6Ly9kZXYubXlzcWwuY29tL2RvYy9yZWZtYW4vOC4wL2VuL3ByaXZpbGVnZXMtcHJvdmlkZWQuaHRtbA==\">官方文档</span></p>\n</blockquote>\n<p>GRANT 和 REVOKE 允许的静态权限</p>\n<table>\n<thead>\n<tr>\n<th>Privilege</th>\n<th>Grant Table Column</th>\n<th>Context</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>[ALL [PRIVILEGES]](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_all)</code></td>\n<td>Synonym for “all privileges”</td>\n<td>Server administration</td>\n</tr>\n<tr>\n<td><code>[ALTER](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_alter)</code></td>\n<td><code>Alter_priv</code></td>\n<td>Tables</td>\n</tr>\n<tr>\n<td><code>[ALTER ROUTINE](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_alter-routine)</code></td>\n<td><code>Alter_routine_priv</code></td>\n<td>Stored routines</td>\n</tr>\n<tr>\n<td><code>[CREATE](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create)</code></td>\n<td><code>Create_priv</code></td>\n<td>Databases, tables, or indexes</td>\n</tr>\n<tr>\n<td><code>[CREATE ROLE](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-role)</code></td>\n<td><code>Create_role_priv</code></td>\n<td>Server administration</td>\n</tr>\n<tr>\n<td><code>[CREATE ROUTINE](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-routine)</code></td>\n<td><code>Create_routine_priv</code></td>\n<td>Stored routines</td>\n</tr>\n<tr>\n<td><code>[CREATE TABLESPACE](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-tablespace)</code></td>\n<td><code>Create_tablespace_priv</code></td>\n<td>Server administration</td>\n</tr>\n<tr>\n<td><code>[CREATE TEMPORARY TABLES](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-temporary-tables)</code></td>\n<td><code>Create_tmp_table_priv</code></td>\n<td>Tables</td>\n</tr>\n<tr>\n<td><code>[CREATE USER](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-user)</code></td>\n<td><code>Create_user_priv</code></td>\n<td>Server administration</td>\n</tr>\n<tr>\n<td><code>[CREATE VIEW](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_create-view)</code></td>\n<td><code>Create_view_priv</code></td>\n<td>Views</td>\n</tr>\n<tr>\n<td><code>[DELETE](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_delete)</code></td>\n<td><code>Delete_priv</code></td>\n<td>Tables</td>\n</tr>\n<tr>\n<td><code>[DROP](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_drop)</code></td>\n<td><code>Drop_priv</code></td>\n<td>Databases, tables, or views</td>\n</tr>\n<tr>\n<td><code>[DROP ROLE](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_drop-role)</code></td>\n<td><code>Drop_role_priv</code></td>\n<td>Server administration</td>\n</tr>\n<tr>\n<td><code>[EVENT](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_event)</code></td>\n<td><code>Event_priv</code></td>\n<td>Databases</td>\n</tr>\n<tr>\n<td><code>[EXECUTE](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_execute)</code></td>\n<td><code>Execute_priv</code></td>\n<td>Stored routines</td>\n</tr>\n<tr>\n<td><code>[FILE](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_file)</code></td>\n<td><code>File_priv</code></td>\n<td>File access on server host</td>\n</tr>\n<tr>\n<td><code>[GRANT OPTION](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_grant-option)</code></td>\n<td><code>Grant_priv</code></td>\n<td>Databases, tables, or stored routines</td>\n</tr>\n<tr>\n<td><code>[INDEX](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_index)</code></td>\n<td><code>Index_priv</code></td>\n<td>Tables</td>\n</tr>\n<tr>\n<td><code>[INSERT](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_insert)</code></td>\n<td><code>Insert_priv</code></td>\n<td>Tables or columns</td>\n</tr>\n<tr>\n<td><code>[LOCK TABLES](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_lock-tables)</code></td>\n<td><code>Lock_tables_priv</code></td>\n<td>Databases</td>\n</tr>\n<tr>\n<td><code>[PROCESS](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_process)</code></td>\n<td><code>Process_priv</code></td>\n<td>Server administration</td>\n</tr>\n<tr>\n<td><code>[PROXY](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_proxy)</code></td>\n<td>See  <code>proxies_priv</code></td>\n</tr>\n<tr>\n<td>table</td>\n<td>Server administration</td>\n</tr>\n<tr>\n<td><code>[REFERENCES](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_references)</code></td>\n<td><code>References_priv</code></td>\n<td>Databases or tables</td>\n</tr>\n<tr>\n<td><code>[RELOAD](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_reload)</code></td>\n<td><code>Reload_priv</code></td>\n<td>Server administration</td>\n</tr>\n<tr>\n<td><code>[REPLICATION CLIENT](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_replication-client)</code></td>\n<td><code>Repl_client_priv</code></td>\n<td>Server administration</td>\n</tr>\n<tr>\n<td><code>[REPLICATION SLAVE](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_replication-slave)</code></td>\n<td><code>Repl_slave_priv</code></td>\n<td>Server administration</td>\n</tr>\n<tr>\n<td><code>[SELECT](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_select)</code></td>\n<td><code>Select_priv</code></td>\n<td>Tables or columns</td>\n</tr>\n<tr>\n<td><code>[SHOW DATABASES](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_show-databases)</code></td>\n<td><code>Show_db_priv</code></td>\n<td>Server administration</td>\n</tr>\n<tr>\n<td><code>[SHOW VIEW](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_show-view)</code></td>\n<td><code>Show_view_priv</code></td>\n<td>Views</td>\n</tr>\n<tr>\n<td><code>[SHUTDOWN](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_shutdown)</code></td>\n<td><code>Shutdown_priv</code></td>\n<td>Server administration</td>\n</tr>\n<tr>\n<td><code>[SUPER](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_super)</code></td>\n<td><code>Super_priv</code></td>\n<td>Server administration</td>\n</tr>\n<tr>\n<td><code>[TRIGGER](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_trigger)</code></td>\n<td><code>Trigger_priv</code></td>\n<td>Tables</td>\n</tr>\n<tr>\n<td><code>[UPDATE](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_update)</code></td>\n<td><code>Update_priv</code></td>\n<td>Tables or columns</td>\n</tr>\n<tr>\n<td><code>[USAGE](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_usage)</code></td>\n<td>Synonym for “no privileges”</td>\n<td>Server administration</td>\n</tr>\n</tbody>\n</table>\n<p>GRANT 和 REVOKE 允许的动态权限</p>\n<table>\n<thead>\n<tr>\n<th>Privilege</th>\n<th>Context</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>[APPLICATION_PASSWORD_ADMIN](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_application-password-admin)</code></td>\n<td>Dual password administration</td>\n</tr>\n<tr>\n<td><code>[AUDIT_ABORT_EXEMPT](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_audit-abort-exempt)</code></td>\n<td>Allow queries blocked by audit log filter</td>\n</tr>\n<tr>\n<td><code>[AUDIT_ADMIN](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_audit-admin)</code></td>\n<td>Audit log administration</td>\n</tr>\n<tr>\n<td><code>[AUTHENTICATION_POLICY_ADMIN](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_authentication-policy-admin)</code></td>\n<td>Authentication administration</td>\n</tr>\n<tr>\n<td><code>[BACKUP_ADMIN](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_backup-admin)</code></td>\n<td>Backup administration</td>\n</tr>\n<tr>\n<td><code>[BINLOG_ADMIN](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_binlog-admin)</code></td>\n<td>Backup and Replication administration</td>\n</tr>\n<tr>\n<td><code>[BINLOG_ENCRYPTION_ADMIN](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_binlog-encryption-admin)</code></td>\n<td>Backup and Replication administration</td>\n</tr>\n<tr>\n<td><code>[CLONE_ADMIN](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_clone-admin)</code></td>\n<td>Clone administration</td>\n</tr>\n<tr>\n<td><code>[CONNECTION_ADMIN](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_connection-admin)</code></td>\n<td>Server administration</td>\n</tr>\n<tr>\n<td><code>[ENCRYPTION_KEY_ADMIN](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_encryption-key-admin)</code></td>\n<td>Server administration</td>\n</tr>\n<tr>\n<td><code>[FIREWALL_ADMIN](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_firewall-admin)</code></td>\n<td>Firewall administration</td>\n</tr>\n<tr>\n<td><code>[FIREWALL_EXEMPT](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_firewall-exempt)</code></td>\n<td>Firewall administration</td>\n</tr>\n<tr>\n<td><code>[FIREWALL_USER](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_firewall-user)</code></td>\n<td>Firewall administration</td>\n</tr>\n<tr>\n<td><code>[FLUSH_OPTIMIZER_COSTS](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_flush-optimizer-costs)</code></td>\n<td>Server administration</td>\n</tr>\n<tr>\n<td><code>[FLUSH_STATUS](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_flush-status)</code></td>\n<td>Server administration</td>\n</tr>\n<tr>\n<td><code>[FLUSH_TABLES](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_flush-tables)</code></td>\n<td>Server administration</td>\n</tr>\n<tr>\n<td><code>[FLUSH_USER_RESOURCES](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_flush-user-resources)</code></td>\n<td>Server administration</td>\n</tr>\n<tr>\n<td><code>[GROUP_REPLICATION_ADMIN](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_group-replication-admin)</code></td>\n<td>Replication administration</td>\n</tr>\n<tr>\n<td><code>[GROUP_REPLICATION_STREAM](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_group-replication-stream)</code></td>\n<td>Replication administration</td>\n</tr>\n<tr>\n<td><code>[INNODB_REDO_LOG_ARCHIVE](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_innodb-redo-log-archive)</code></td>\n<td>Redo log archiving administration</td>\n</tr>\n<tr>\n<td><code>[NDB_STORED_USER](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_ndb-stored-user)</code></td>\n<td>NDB Cluster</td>\n</tr>\n<tr>\n<td><code>[PASSWORDLESS_USER_ADMIN](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_passwordless-user-admin)</code></td>\n<td>Authentication administration</td>\n</tr>\n<tr>\n<td><code>[PERSIST_RO_VARIABLES_ADMIN](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_persist-ro-variables-admin)</code></td>\n<td>Server administration</td>\n</tr>\n<tr>\n<td><code>[REPLICATION_APPLIER](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_replication-applier)</code></td>\n<td><code>PRIVILEGE_CHECKS_USER</code></td>\n</tr>\n<tr>\n<td>for a replication channel</td>\n</tr>\n<tr>\n<td><code>[REPLICATION_SLAVE_ADMIN](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_replication-slave-admin)</code></td>\n<td>Replication administration</td>\n</tr>\n<tr>\n<td><code>[RESOURCE_GROUP_ADMIN](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_resource-group-admin)</code></td>\n<td>Resource group administration</td>\n</tr>\n<tr>\n<td><code>[RESOURCE_GROUP_USER](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_resource-group-user)</code></td>\n<td>Resource group administration</td>\n</tr>\n<tr>\n<td><code>[ROLE_ADMIN](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_role-admin)</code></td>\n<td>Server administration</td>\n</tr>\n<tr>\n<td><code>[SESSION_VARIABLES_ADMIN](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_session-variables-admin)</code></td>\n<td>Server administration</td>\n</tr>\n<tr>\n<td><code>[SET_USER_ID](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_set-user-id)</code></td>\n<td>Server administration</td>\n</tr>\n<tr>\n<td><code>[SHOW_ROUTINE](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_show-routine)</code></td>\n<td>Server administration</td>\n</tr>\n<tr>\n<td><code>[SYSTEM_USER](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_system-user)</code></td>\n<td>Server administration</td>\n</tr>\n<tr>\n<td><code>[SYSTEM_VARIABLES_ADMIN](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_system-variables-admin)</code></td>\n<td>Server administration</td>\n</tr>\n<tr>\n<td><code>[TABLE_ENCRYPTION_ADMIN](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_table-encryption-admin)</code></td>\n<td>Server administration</td>\n</tr>\n<tr>\n<td><code>[VERSION_TOKEN_ADMIN](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_version-token-admin)</code></td>\n<td>Server administration</td>\n</tr>\n<tr>\n<td><code>[XA_RECOVER_ADMIN](https://dev.mysql.com/doc/refman/8.0/en/privileges-provided.html#priv_xa-recover-admin)</code></td>\n<td>Server administration</td>\n</tr>\n</tbody>\n</table>\n<h1 id=\"图形化界面工具\"><a class=\"anchor\" href=\"#图形化界面工具\">#</a> 图形化界面工具</h1>\n<ul>\n<li>Workbench (免费): <span class=\"exturl\" data-url=\"aHR0cDovL2Rldi5teXNxbC5jb20vZG93bmxvYWRzL3dvcmtiZW5jaC8=\">http://dev.mysql.com/downloads/workbench/</span></li>\n<li>navicat (收费，试用版 30 天): <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cubmF2aWNhdC5jb20vZW4vZG93bmxvYWQvbmF2aWNhdC1mb3ItbXlzcWw=\">https://www.navicat.com/en/download/navicat-for-mysql</span></li>\n<li>Sequel Pro (开源免费，仅支持 Mac OS): <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5zZXF1ZWxwcm8uY29tLw==\">http://www.sequelpro.com/</span></li>\n<li>HeidiSQL (免费): <span class=\"exturl\" data-url=\"aHR0cDovL3d3dy5oZWlkaXNxbC5jb20v\">http://www.heidisql.com/</span></li>\n<li>phpMyAdmin (免费): <span class=\"exturl\" data-url=\"aHR0cHM6Ly93d3cucGhwbXlhZG1pbi5uZXQv\">https://www.phpmyadmin.net/</span></li>\n<li>SQLyog: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9zcWx5b2cuZW4uc29mdG9uaWMuY29tLw==\">https://sqlyog.en.softonic.com/</span></li>\n</ul>\n<h1 id=\"安装\"><a class=\"anchor\" href=\"#安装\">#</a> 安装</h1>\n<h1 id=\"小技巧\"><a class=\"anchor\" href=\"#小技巧\">#</a> 小技巧</h1>\n<ol>\n<li>在 SQL 语句之后加上 <code>\\G</code>  会将结果的表格形式转换成行文本形式</li>\n<li>查看 Mysql 数据库占用空间：</li>\n</ol>\n<pre><code>SELECT table_schema &quot;Database Name&quot;\n     , SUM(data_length + index_length) / (1024 * 1024) &quot;Database Size in MB&quot;\nFROM information_schema.TABLES\nGROUP BY table_schema;\n</code></pre>\n",
            "tags": [
                "mysql",
                "mysql"
            ]
        },
        {
            "id": "http://yishan.blog/2023/07/25/hello-world/",
            "url": "http://yishan.blog/2023/07/25/hello-world/",
            "title": "Hello World",
            "date_published": "2023-07-25T07:35:50.606Z",
            "content_html": "<p>Welcome to <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvLw==\">Hexo</span>! This is your very first post. Check <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mv\">documentation</span> for more info. If you get any problems when using Hexo, you can find the answer in <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvdHJvdWJsZXNob290aW5nLmh0bWw=\">troubleshooting</span> or you can ask me on <span class=\"exturl\" data-url=\"aHR0cHM6Ly9naXRodWIuY29tL2hleG9qcy9oZXhvL2lzc3Vlcw==\">GitHub</span>.</p>\n<h2 id=\"quick-start\"><a class=\"anchor\" href=\"#quick-start\">#</a> Quick Start</h2>\n<h3 id=\"create-a-new-post\"><a class=\"anchor\" href=\"#create-a-new-post\">#</a> Create a new post</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo new <span class=\"token string\">\"My New Post\"</span></pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvd3JpdGluZy5odG1s\">Writing</span></p>\n<h3 id=\"run-server\"><a class=\"anchor\" href=\"#run-server\">#</a> Run server</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo server</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvc2VydmVyLmh0bWw=\">Server</span></p>\n<h3 id=\"generate-static-files\"><a class=\"anchor\" href=\"#generate-static-files\">#</a> Generate static files</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo generate</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3MvZ2VuZXJhdGluZy5odG1s\">Generating</span></p>\n<h3 id=\"deploy-to-remote-sites\"><a class=\"anchor\" href=\"#deploy-to-remote-sites\">#</a> Deploy to remote sites</h3>\n<figure class=\"highlight bash\"><figcaption data-lang=\"bash\"><span>h</span></figcaption><table><tr><td data-num=\"1\"></td><td><pre>$ hexo deploy</pre></td></tr></table></figure><p>More info: <span class=\"exturl\" data-url=\"aHR0cHM6Ly9oZXhvLmlvL2RvY3Mvb25lLWNvbW1hbmQtZGVwbG95bWVudC5odG1s\">Deployment</span></p>\n",
            "tags": []
        }
    ]
}